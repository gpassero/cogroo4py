import java.awt
import java.io
import java.lang
import java.net
import java.util
import org.apache.log4j
import org.apache.log4j.lf5.util
import org.apache.log4j.lf5.viewer
import org.apache.log4j.spi
import typing



class AppenderFinalizer:
    def __init__(self, logBrokerMonitor: org.apache.log4j.lf5.viewer.LogBrokerMonitor): ...

class DefaultLF5Configurator(org.apache.log4j.spi.Configurator):
    @staticmethod
    def configure() -> None: ...
    @typing.overload
    def doConfigure(self, inputStream: java.io.InputStream, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @typing.overload
    def doConfigure(self, uRL: java.net.URL, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...

class LF5Appender(org.apache.log4j.AppenderSkeleton):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, logBrokerMonitor: org.apache.log4j.lf5.viewer.LogBrokerMonitor): ...
    def append(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def close(self) -> None: ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def equals(self, lF5Appender: 'LF5Appender') -> bool: ...
    def getLogBrokerMonitor(self) -> org.apache.log4j.lf5.viewer.LogBrokerMonitor: ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...
    def requiresLayout(self) -> bool: ...
    def setCallSystemExitOnClose(self, boolean: bool) -> None: ...
    def setMaxNumberOfRecords(self, int: int) -> None: ...

class LogLevel(java.io.Serializable):
    FATAL: typing.ClassVar['LogLevel'] = ...
    ERROR: typing.ClassVar['LogLevel'] = ...
    WARN: typing.ClassVar['LogLevel'] = ...
    INFO: typing.ClassVar['LogLevel'] = ...
    DEBUG: typing.ClassVar['LogLevel'] = ...
    SEVERE: typing.ClassVar['LogLevel'] = ...
    WARNING: typing.ClassVar['LogLevel'] = ...
    CONFIG: typing.ClassVar['LogLevel'] = ...
    FINE: typing.ClassVar['LogLevel'] = ...
    FINER: typing.ClassVar['LogLevel'] = ...
    FINEST: typing.ClassVar['LogLevel'] = ...
    def __init__(self, string: str, int: int): ...
    def encompasses(self, logLevel: 'LogLevel') -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    @staticmethod
    def getAllDefaultLevels() -> java.util.List: ...
    @staticmethod
    def getJdk14Levels() -> java.util.List: ...
    def getLabel(self) -> str: ...
    @staticmethod
    def getLog4JLevels() -> java.util.List: ...
    @staticmethod
    def getLogLevelColorMap() -> java.util.Map: ...
    def hashCode(self) -> int: ...
    @typing.overload
    @staticmethod
    def register(logLevel: 'LogLevel') -> 'LogLevel': ...
    @typing.overload
    @staticmethod
    def register(list: java.util.List) -> None: ...
    @typing.overload
    @staticmethod
    def register(logLevelArray: typing.List['LogLevel']) -> None: ...
    @staticmethod
    def resetLogLevelColorMap() -> None: ...
    def setLogLevelColorMap(self, logLevel: 'LogLevel', color: java.awt.Color) -> None: ...
    def toString(self) -> str: ...
    @staticmethod
    def valueOf(string: str) -> 'LogLevel': ...

class LogLevelFormatException(java.lang.Exception):
    def __init__(self, string: str): ...

class LogRecord(java.io.Serializable):
    def __init__(self): ...
    def getCategory(self) -> str: ...
    def getLevel(self) -> LogLevel: ...
    def getLocation(self) -> str: ...
    def getMessage(self) -> str: ...
    def getMillis(self) -> int: ...
    def getNDC(self) -> str: ...
    def getSequenceNumber(self) -> int: ...
    def getThreadDescription(self) -> str: ...
    def getThrown(self) -> java.lang.Throwable: ...
    def getThrownStackTrace(self) -> str: ...
    def hasThrown(self) -> bool: ...
    def isFatal(self) -> bool: ...
    def isSevereLevel(self) -> bool: ...
    @staticmethod
    def resetSequenceNumber() -> None: ...
    def setCategory(self, string: str) -> None: ...
    def setLevel(self, logLevel: LogLevel) -> None: ...
    def setLocation(self, string: str) -> None: ...
    def setMessage(self, string: str) -> None: ...
    def setMillis(self, long: int) -> None: ...
    def setNDC(self, string: str) -> None: ...
    def setSequenceNumber(self, long: int) -> None: ...
    def setThreadDescription(self, string: str) -> None: ...
    def setThrown(self, throwable: java.lang.Throwable) -> None: ...
    def setThrownStackTrace(self, string: str) -> None: ...
    def toString(self) -> str: ...

class LogRecordFilter:
    def passes(self, logRecord: LogRecord) -> bool: ...

class StartLogFactor5:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...

class Log4JLogRecord(LogRecord):
    def __init__(self): ...
    def isSevereLevel(self) -> bool: ...
    @typing.overload
    def setThrownStackTrace(self, throwableInformation: org.apache.log4j.spi.ThrowableInformation) -> None: ...
    @typing.overload
    def setThrownStackTrace(self, string: str) -> None: ...

class PassingLogRecordFilter(LogRecordFilter):
    def __init__(self): ...
    def passes(self, logRecord: LogRecord) -> bool: ...
    def reset(self) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.lf5")``.

    AppenderFinalizer: typing.Type[AppenderFinalizer]
    DefaultLF5Configurator: typing.Type[DefaultLF5Configurator]
    LF5Appender: typing.Type[LF5Appender]
    Log4JLogRecord: typing.Type[Log4JLogRecord]
    LogLevel: typing.Type[LogLevel]
    LogLevelFormatException: typing.Type[LogLevelFormatException]
    LogRecord: typing.Type[LogRecord]
    LogRecordFilter: typing.Type[LogRecordFilter]
    PassingLogRecordFilter: typing.Type[PassingLogRecordFilter]
    StartLogFactor5: typing.Type[StartLogFactor5]
    util: org.apache.log4j.lf5.util.__module_protocol__
    viewer: org.apache.log4j.lf5.viewer.__module_protocol__
