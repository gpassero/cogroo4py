import java.io
import java.lang
import java.net
import java.text
import java.util
import jpype.protocol
import org.apache.log4j.lf5
import org.apache.log4j.lf5.viewer
import typing



class AdapterLogRecord(org.apache.log4j.lf5.LogRecord):
    def __init__(self): ...
    @staticmethod
    def getSevereLevel() -> org.apache.log4j.lf5.LogLevel: ...
    def isSevereLevel(self) -> bool: ...
    def setCategory(self, string: str) -> None: ...
    @staticmethod
    def setSevereLevel(logLevel: org.apache.log4j.lf5.LogLevel) -> None: ...

class DateFormatManager:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, locale: java.util.Locale): ...
    @typing.overload
    def __init__(self, locale: java.util.Locale, string: str): ...
    @typing.overload
    def __init__(self, timeZone: java.util.TimeZone): ...
    @typing.overload
    def __init__(self, timeZone: java.util.TimeZone, string: str): ...
    @typing.overload
    def __init__(self, timeZone: java.util.TimeZone, locale: java.util.Locale): ...
    @typing.overload
    def __init__(self, timeZone: java.util.TimeZone, locale: java.util.Locale, string: str): ...
    @typing.overload
    def format(self, date: java.util.Date) -> str: ...
    @typing.overload
    def format(self, date: java.util.Date, string: str) -> str: ...
    def getDateFormatInstance(self) -> java.text.DateFormat: ...
    def getLocale(self) -> java.util.Locale: ...
    def getOutputFormat(self) -> str: ...
    def getPattern(self) -> str: ...
    def getTimeZone(self) -> java.util.TimeZone: ...
    @typing.overload
    def parse(self, string: str) -> java.util.Date: ...
    @typing.overload
    def parse(self, string: str, string2: str) -> java.util.Date: ...
    def setDateFormatInstance(self, dateFormat: java.text.DateFormat) -> None: ...
    def setLocale(self, locale: java.util.Locale) -> None: ...
    def setOutputFormat(self, string: str) -> None: ...
    def setPattern(self, string: str) -> None: ...
    def setTimeZone(self, timeZone: java.util.TimeZone) -> None: ...

class LogFileParser(java.lang.Runnable):
    RECORD_DELIMITER: typing.ClassVar[str] = ...
    ATTRIBUTE_DELIMITER: typing.ClassVar[str] = ...
    DATE_DELIMITER: typing.ClassVar[str] = ...
    THREAD_DELIMITER: typing.ClassVar[str] = ...
    CATEGORY_DELIMITER: typing.ClassVar[str] = ...
    LOCATION_DELIMITER: typing.ClassVar[str] = ...
    MESSAGE_DELIMITER: typing.ClassVar[str] = ...
    PRIORITY_DELIMITER: typing.ClassVar[str] = ...
    NDC_DELIMITER: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    def parse(self, logBrokerMonitor: org.apache.log4j.lf5.viewer.LogBrokerMonitor) -> None: ...
    def run(self) -> None: ...

class LogMonitorAdapter:
    LOG4J_LOG_LEVELS: typing.ClassVar[int] = ...
    JDK14_LOG_LEVELS: typing.ClassVar[int] = ...
    def addMessage(self, logRecord: org.apache.log4j.lf5.LogRecord) -> None: ...
    def getDefaultLevel(self) -> org.apache.log4j.lf5.LogLevel: ...
    def getSevereLevel(self) -> org.apache.log4j.lf5.LogLevel: ...
    @typing.overload
    def log(self, string: str, string2: str) -> None: ...
    @typing.overload
    def log(self, string: str, logLevel: org.apache.log4j.lf5.LogLevel, string2: str) -> None: ...
    @typing.overload
    def log(self, string: str, logLevel: org.apache.log4j.lf5.LogLevel, string2: str, string3: str) -> None: ...
    @typing.overload
    def log(self, string: str, logLevel: org.apache.log4j.lf5.LogLevel, string2: str, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def log(self, string: str, logLevel: org.apache.log4j.lf5.LogLevel, string2: str, throwable: java.lang.Throwable, string3: str) -> None: ...
    @typing.overload
    @staticmethod
    def newInstance(int: int) -> 'LogMonitorAdapter': ...
    @typing.overload
    @staticmethod
    def newInstance(list: java.util.List) -> 'LogMonitorAdapter': ...
    @typing.overload
    @staticmethod
    def newInstance(logLevelArray: typing.List[org.apache.log4j.lf5.LogLevel]) -> 'LogMonitorAdapter': ...
    def setDefaultLevel(self, logLevel: org.apache.log4j.lf5.LogLevel) -> None: ...
    def setMaxNumberOfRecords(self, int: int) -> None: ...
    def setSevereLevel(self, logLevel: org.apache.log4j.lf5.LogLevel) -> None: ...

class Resource:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getInputStream(self) -> java.io.InputStream: ...
    def getInputStreamReader(self) -> java.io.InputStreamReader: ...
    def getName(self) -> str: ...
    def getURL(self) -> java.net.URL: ...
    def setName(self, string: str) -> None: ...

class ResourceUtils:
    def __init__(self): ...
    @staticmethod
    def getResourceAsStream(object: typing.Any, resource: Resource) -> java.io.InputStream: ...
    @staticmethod
    def getResourceAsURL(object: typing.Any, resource: Resource) -> java.net.URL: ...

class StreamUtils:
    DEFAULT_BUFFER_SIZE: typing.ClassVar[int] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def copy(inputStream: java.io.InputStream, outputStream: java.io.OutputStream) -> None: ...
    @typing.overload
    @staticmethod
    def copy(inputStream: java.io.InputStream, outputStream: java.io.OutputStream, int: int) -> None: ...
    @staticmethod
    def copyThenClose(inputStream: java.io.InputStream, outputStream: java.io.OutputStream) -> None: ...
    @staticmethod
    def getBytes(inputStream: java.io.InputStream) -> typing.List[int]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.lf5.util")``.

    AdapterLogRecord: typing.Type[AdapterLogRecord]
    DateFormatManager: typing.Type[DateFormatManager]
    LogFileParser: typing.Type[LogFileParser]
    LogMonitorAdapter: typing.Type[LogMonitorAdapter]
    Resource: typing.Type[Resource]
    ResourceUtils: typing.Type[ResourceUtils]
    StreamUtils: typing.Type[StreamUtils]
