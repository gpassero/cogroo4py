import java.beans
import java.io
import java.lang
import java.util
import typing



class PropertyGetter:
    def __init__(self, object: typing.Any): ...
    @typing.overload
    @staticmethod
    def getProperties(object: typing.Any, propertyCallback: 'PropertyGetter.PropertyCallback', string: str) -> None: ...
    @typing.overload
    def getProperties(self, propertyCallback: 'PropertyGetter.PropertyCallback', string: str) -> None: ...
    class PropertyCallback:
        def foundProperty(self, object: typing.Any, string: str, string2: str, object2: typing.Any) -> None: ...

class PropertySetter:
    def __init__(self, object: typing.Any): ...
    def activate(self) -> None: ...
    @typing.overload
    @staticmethod
    def setProperties(object: typing.Any, properties: java.util.Properties, string: str) -> None: ...
    @typing.overload
    def setProperties(self, properties: java.util.Properties, string: str) -> None: ...
    @typing.overload
    def setProperty(self, propertyDescriptor: java.beans.PropertyDescriptor, string: str, string2: str) -> None: ...
    @typing.overload
    def setProperty(self, string: str, string2: str) -> None: ...

class PropertySetterException(java.lang.Exception):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...
    def getMessage(self) -> str: ...

class PropertyPrinter(PropertyGetter.PropertyCallback):
    @typing.overload
    def __init__(self, printWriter: java.io.PrintWriter): ...
    @typing.overload
    def __init__(self, printWriter: java.io.PrintWriter, boolean: bool): ...
    @staticmethod
    def capitalize(string: str) -> str: ...
    def foundProperty(self, object: typing.Any, string: str, string2: str, object2: typing.Any) -> None: ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.config")``.

    PropertyGetter: typing.Type[PropertyGetter]
    PropertyPrinter: typing.Type[PropertyPrinter]
    PropertySetter: typing.Type[PropertySetter]
    PropertySetterException: typing.Type[PropertySetterException]
