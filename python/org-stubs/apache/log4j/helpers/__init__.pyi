import java.io
import java.lang
import java.net
import java.text
import java.util
import org.apache.log4j
import org.apache.log4j.spi
import typing



class AbsoluteTimeDateFormat(java.text.DateFormat):
    ABS_TIME_DATE_FORMAT: typing.ClassVar[str] = ...
    DATE_AND_TIME_DATE_FORMAT: typing.ClassVar[str] = ...
    ISO8601_DATE_FORMAT: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeZone: java.util.TimeZone): ...
    @typing.overload
    def format(self, date: java.util.Date) -> str: ...
    @typing.overload
    def format(self, object: typing.Any) -> str: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def format(self, date: java.util.Date, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def parse(self, string: str) -> java.util.Date: ...
    @typing.overload
    def parse(self, string: str, parsePosition: java.text.ParsePosition) -> java.util.Date: ...

class AppenderAttachableImpl(org.apache.log4j.spi.AppenderAttachable):
    def __init__(self): ...
    def addAppender(self, appender: org.apache.log4j.Appender) -> None: ...
    def appendLoopOnAppenders(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> int: ...
    def getAllAppenders(self) -> java.util.Enumeration: ...
    def getAppender(self, string: str) -> org.apache.log4j.Appender: ...
    def isAttached(self, appender: org.apache.log4j.Appender) -> bool: ...
    def removeAllAppenders(self) -> None: ...
    @typing.overload
    def removeAppender(self, string: str) -> None: ...
    @typing.overload
    def removeAppender(self, appender: org.apache.log4j.Appender) -> None: ...

class BoundedFIFO:
    def __init__(self, int: int): ...
    def get(self) -> org.apache.log4j.spi.LoggingEvent: ...
    def getMaxSize(self) -> int: ...
    def isFull(self) -> bool: ...
    def length(self) -> int: ...
    def put(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def resize(self, int: int) -> None: ...
    def wasEmpty(self) -> bool: ...
    def wasFull(self) -> bool: ...

class CyclicBuffer:
    def __init__(self, int: int): ...
    def add(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    @typing.overload
    def get(self) -> org.apache.log4j.spi.LoggingEvent: ...
    @typing.overload
    def get(self, int: int) -> org.apache.log4j.spi.LoggingEvent: ...
    def getMaxSize(self) -> int: ...
    def length(self) -> int: ...
    def resize(self, int: int) -> None: ...

class DateLayout(org.apache.log4j.Layout):
    NULL_DATE_FORMAT: typing.ClassVar[str] = ...
    RELATIVE_TIME_DATE_FORMAT: typing.ClassVar[str] = ...
    DATE_FORMAT_OPTION: typing.ClassVar[str] = ...
    TIMEZONE_OPTION: typing.ClassVar[str] = ...
    def __init__(self): ...
    def activateOptions(self) -> None: ...
    def dateFormat(self, stringBuffer: java.lang.StringBuffer, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def getDateFormat(self) -> str: ...
    def getOptionStrings(self) -> typing.List[str]: ...
    def getTimeZone(self) -> str: ...
    @typing.overload
    def setDateFormat(self, string: str) -> None: ...
    @typing.overload
    def setDateFormat(self, string: str, timeZone: java.util.TimeZone) -> None: ...
    @typing.overload
    def setDateFormat(self, dateFormat: java.text.DateFormat, timeZone: java.util.TimeZone) -> None: ...
    def setOption(self, string: str, string2: str) -> None: ...
    def setTimeZone(self, string: str) -> None: ...

class FileWatchdog(java.lang.Thread):
    DEFAULT_DELAY: typing.ClassVar[int] = ...
    def run(self) -> None: ...
    def setDelay(self, long: int) -> None: ...

class FormattingInfo:
    def __init__(self): ...

class Loader:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def getResource(string: str) -> java.net.URL: ...
    @typing.overload
    @staticmethod
    def getResource(string: str, class_: typing.Type) -> java.net.URL: ...
    @staticmethod
    def isJava1() -> bool: ...
    @staticmethod
    def loadClass(string: str) -> typing.Type: ...

class LogLog:
    DEBUG_KEY: typing.ClassVar[str] = ...
    CONFIG_DEBUG_KEY: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def debug(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def debug(string: str, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    @staticmethod
    def error(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def error(string: str, throwable: java.lang.Throwable) -> None: ...
    @staticmethod
    def setInternalDebugging(boolean: bool) -> None: ...
    @staticmethod
    def setQuietMode(boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def warn(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def warn(string: str, throwable: java.lang.Throwable) -> None: ...

class MDCKeySetExtractor:
    INSTANCE: typing.ClassVar['MDCKeySetExtractor'] = ...
    def getPropertyKeySet(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> java.util.Set: ...

class NullEnumeration(java.util.Enumeration):
    @staticmethod
    def getInstance() -> 'NullEnumeration': ...
    def hasMoreElements(self) -> bool: ...
    def nextElement(self) -> typing.Any: ...

class OnlyOnceErrorHandler(org.apache.log4j.spi.ErrorHandler):
    def __init__(self): ...
    def activateOptions(self) -> None: ...
    @typing.overload
    def error(self, string: str) -> None: ...
    @typing.overload
    def error(self, string: str, exception: java.lang.Exception, int: int) -> None: ...
    @typing.overload
    def error(self, string: str, exception: java.lang.Exception, int: int, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def setAppender(self, appender: org.apache.log4j.Appender) -> None: ...
    def setBackupAppender(self, appender: org.apache.log4j.Appender) -> None: ...
    def setLogger(self, logger: org.apache.log4j.Logger) -> None: ...

class OptionConverter:
    @staticmethod
    def concatanateArrays(stringArray: typing.List[str], stringArray2: typing.List[str]) -> typing.List[str]: ...
    @staticmethod
    def convertSpecialChars(string: str) -> str: ...
    @staticmethod
    def findAndSubst(string: str, properties: java.util.Properties) -> str: ...
    @staticmethod
    def getSystemProperty(string: str, string2: str) -> str: ...
    @staticmethod
    def instantiateByClassName(string: str, class_: typing.Type, object: typing.Any) -> typing.Any: ...
    @staticmethod
    def instantiateByKey(properties: java.util.Properties, string: str, class_: typing.Type, object: typing.Any) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def selectAndConfigure(inputStream: java.io.InputStream, string: str, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @typing.overload
    @staticmethod
    def selectAndConfigure(uRL: java.net.URL, string: str, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @staticmethod
    def substVars(string: str, properties: java.util.Properties) -> str: ...
    @staticmethod
    def toBoolean(string: str, boolean: bool) -> bool: ...
    @staticmethod
    def toFileSize(string: str, long: int) -> int: ...
    @staticmethod
    def toInt(string: str, int: int) -> int: ...
    @staticmethod
    def toLevel(string: str, level: org.apache.log4j.Level) -> org.apache.log4j.Level: ...

class PatternConverter:
    next: 'PatternConverter' = ...
    def format(self, stringBuffer: java.lang.StringBuffer, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def spacePad(self, stringBuffer: java.lang.StringBuffer, int: int) -> None: ...

class PatternParser:
    def __init__(self, string: str): ...
    def parse(self) -> PatternConverter: ...

class QuietWriter(java.io.FilterWriter):
    def __init__(self, writer: java.io.Writer, errorHandler: org.apache.log4j.spi.ErrorHandler): ...
    def flush(self) -> None: ...
    def setErrorHandler(self, errorHandler: org.apache.log4j.spi.ErrorHandler) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...
    @typing.overload
    def write(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str]) -> None: ...
    @typing.overload
    def write(self, string: str) -> None: ...

class RelativeTimeDateFormat(java.text.DateFormat):
    def __init__(self): ...
    @typing.overload
    def format(self, date: java.util.Date) -> str: ...
    @typing.overload
    def format(self, object: typing.Any) -> str: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def format(self, date: java.util.Date, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def parse(self, string: str) -> java.util.Date: ...
    @typing.overload
    def parse(self, string: str, parsePosition: java.text.ParsePosition) -> java.util.Date: ...

class SyslogWriter(java.io.Writer):
    def __init__(self, string: str): ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str]) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...
    @typing.overload
    def write(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, string: str) -> None: ...

class ThreadLocalMap(java.lang.InheritableThreadLocal):
    def __init__(self): ...
    def childValue(self, object: typing.Any) -> typing.Any: ...

class Transform:
    def __init__(self): ...
    @staticmethod
    def appendEscapingCDATA(stringBuffer: java.lang.StringBuffer, string2: str) -> None: ...
    @staticmethod
    def escapeTags(string: str) -> str: ...

class UtilLoggingLevel(org.apache.log4j.Level):
    SEVERE_INT: typing.ClassVar[int] = ...
    WARNING_INT: typing.ClassVar[int] = ...
    CONFIG_INT: typing.ClassVar[int] = ...
    FINE_INT: typing.ClassVar[int] = ...
    FINER_INT: typing.ClassVar[int] = ...
    FINEST_INT: typing.ClassVar[int] = ...
    UNKNOWN_INT: typing.ClassVar[int] = ...
    SEVERE: typing.ClassVar['UtilLoggingLevel'] = ...
    WARNING: typing.ClassVar['UtilLoggingLevel'] = ...
    INFO: typing.ClassVar['UtilLoggingLevel'] = ...
    CONFIG: typing.ClassVar['UtilLoggingLevel'] = ...
    FINE: typing.ClassVar['UtilLoggingLevel'] = ...
    FINER: typing.ClassVar['UtilLoggingLevel'] = ...
    FINEST: typing.ClassVar['UtilLoggingLevel'] = ...
    @staticmethod
    def getAllPossibleLevels() -> java.util.List: ...
    @typing.overload
    @staticmethod
    def toLevel(int: int, level: org.apache.log4j.Level) -> org.apache.log4j.Level: ...
    @typing.overload
    @staticmethod
    def toLevel(int: int) -> org.apache.log4j.Level: ...
    @typing.overload
    @staticmethod
    def toLevel(string: str) -> org.apache.log4j.Level: ...
    @typing.overload
    @staticmethod
    def toLevel(string: str, level: org.apache.log4j.Level) -> org.apache.log4j.Level: ...
    @typing.overload
    @staticmethod
    def toLevel(int: int, utilLoggingLevel: 'UtilLoggingLevel') -> 'UtilLoggingLevel': ...

class CountingQuietWriter(QuietWriter):
    def __init__(self, writer: java.io.Writer, errorHandler: org.apache.log4j.spi.ErrorHandler): ...
    def getCount(self) -> int: ...
    def setCount(self, long: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...
    @typing.overload
    def write(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str]) -> None: ...
    @typing.overload
    def write(self, string: str) -> None: ...

class DateTimeDateFormat(AbsoluteTimeDateFormat):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeZone: java.util.TimeZone): ...
    @typing.overload
    def format(self, date: java.util.Date) -> str: ...
    @typing.overload
    def format(self, object: typing.Any) -> str: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def format(self, date: java.util.Date, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def parse(self, string: str) -> java.util.Date: ...
    @typing.overload
    def parse(self, string: str, parsePosition: java.text.ParsePosition) -> java.util.Date: ...

class ISO8601DateFormat(AbsoluteTimeDateFormat):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, timeZone: java.util.TimeZone): ...
    @typing.overload
    def format(self, date: java.util.Date) -> str: ...
    @typing.overload
    def format(self, object: typing.Any) -> str: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def format(self, date: java.util.Date, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def parse(self, string: str) -> java.util.Date: ...
    @typing.overload
    def parse(self, string: str, parsePosition: java.text.ParsePosition) -> java.util.Date: ...

class SyslogQuietWriter(QuietWriter):
    def __init__(self, writer: java.io.Writer, int: int, errorHandler: org.apache.log4j.spi.ErrorHandler): ...
    def setLevel(self, int: int) -> None: ...
    def setSyslogFacility(self, int: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str], int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...
    @typing.overload
    def write(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.List[str]) -> None: ...
    @typing.overload
    def write(self, string: str) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.helpers")``.

    AbsoluteTimeDateFormat: typing.Type[AbsoluteTimeDateFormat]
    AppenderAttachableImpl: typing.Type[AppenderAttachableImpl]
    BoundedFIFO: typing.Type[BoundedFIFO]
    CountingQuietWriter: typing.Type[CountingQuietWriter]
    CyclicBuffer: typing.Type[CyclicBuffer]
    DateLayout: typing.Type[DateLayout]
    DateTimeDateFormat: typing.Type[DateTimeDateFormat]
    FileWatchdog: typing.Type[FileWatchdog]
    FormattingInfo: typing.Type[FormattingInfo]
    ISO8601DateFormat: typing.Type[ISO8601DateFormat]
    Loader: typing.Type[Loader]
    LogLog: typing.Type[LogLog]
    MDCKeySetExtractor: typing.Type[MDCKeySetExtractor]
    NullEnumeration: typing.Type[NullEnumeration]
    OnlyOnceErrorHandler: typing.Type[OnlyOnceErrorHandler]
    OptionConverter: typing.Type[OptionConverter]
    PatternConverter: typing.Type[PatternConverter]
    PatternParser: typing.Type[PatternParser]
    QuietWriter: typing.Type[QuietWriter]
    RelativeTimeDateFormat: typing.Type[RelativeTimeDateFormat]
    SyslogQuietWriter: typing.Type[SyslogQuietWriter]
    SyslogWriter: typing.Type[SyslogWriter]
    ThreadLocalMap: typing.Type[ThreadLocalMap]
    Transform: typing.Type[Transform]
    UtilLoggingLevel: typing.Type[UtilLoggingLevel]
