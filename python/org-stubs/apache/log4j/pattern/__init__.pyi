import java.io
import java.lang
import java.text
import java.util
import org.apache.log4j
import org.apache.log4j.helpers
import org.apache.log4j.spi
import typing



class BridgePatternConverter(org.apache.log4j.helpers.PatternConverter):
    def __init__(self, string: str): ...
    def format(self, stringBuffer: java.lang.StringBuffer, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def ignoresThrowable(self) -> bool: ...

class BridgePatternParser(org.apache.log4j.helpers.PatternParser):
    def __init__(self, string: str): ...
    def parse(self) -> org.apache.log4j.helpers.PatternConverter: ...

class CachedDateFormat(java.text.DateFormat):
    NO_MILLISECONDS: typing.ClassVar[int] = ...
    UNRECOGNIZED_MILLISECONDS: typing.ClassVar[int] = ...
    def __init__(self, dateFormat: java.text.DateFormat, int: int): ...
    @staticmethod
    def findMillisecondStart(long: int, string: str, dateFormat: java.text.DateFormat) -> int: ...
    @typing.overload
    def format(self, date: java.util.Date) -> str: ...
    @typing.overload
    def format(self, object: typing.Any) -> str: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def format(self, date: java.util.Date, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def format(self, long: int, stringBuffer: java.lang.StringBuffer) -> java.lang.StringBuffer: ...
    @staticmethod
    def getMaximumCacheValidity(string: str) -> int: ...
    def getNumberFormat(self) -> java.text.NumberFormat: ...
    @typing.overload
    def parse(self, string: str) -> java.util.Date: ...
    @typing.overload
    def parse(self, string: str, parsePosition: java.text.ParsePosition) -> java.util.Date: ...
    def setTimeZone(self, timeZone: java.util.TimeZone) -> None: ...

class FileDatePatternConverter:
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'PatternConverter': ...

class FormattingInfo:
    def __init__(self, boolean: bool, int: int, int2: int): ...
    def format(self, int: int, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def getDefault() -> 'FormattingInfo': ...
    def getMaxLength(self) -> int: ...
    def getMinLength(self) -> int: ...
    def isLeftAligned(self) -> bool: ...

class LogEvent(java.io.Serializable):
    fqnOfCategoryClass: str = ...
    categoryName: str = ...
    level: org.apache.log4j.Priority = ...
    timeStamp: int = ...
    @typing.overload
    def __init__(self, string: str, category: org.apache.log4j.Category, long: int, priority: org.apache.log4j.Priority, object: typing.Any, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, string: str, category: org.apache.log4j.Category, priority: org.apache.log4j.Priority, object: typing.Any, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, string: str, logger: org.apache.log4j.Logger, long: int, level: org.apache.log4j.Level, object: typing.Any, string2: str, throwableInformation: org.apache.log4j.spi.ThrowableInformation, string3: str, locationInfo: org.apache.log4j.spi.LocationInfo, map: typing.Union[java.util.Map, typing.Mapping]): ...
    def getFQNOfLoggerClass(self) -> str: ...
    def getLevel(self) -> org.apache.log4j.Level: ...
    def getLocationInformation(self) -> org.apache.log4j.spi.LocationInfo: ...
    def getLoggerName(self) -> str: ...
    def getMDC(self, string: str) -> typing.Any: ...
    def getMDCCopy(self) -> None: ...
    def getMessage(self) -> typing.Any: ...
    def getNDC(self) -> str: ...
    def getProperties(self) -> java.util.Map: ...
    def getProperty(self, string: str) -> str: ...
    def getPropertyKeySet(self) -> java.util.Set: ...
    def getRenderedMessage(self) -> str: ...
    @staticmethod
    def getStartTime() -> int: ...
    def getThreadName(self) -> str: ...
    def getThrowableInformation(self) -> org.apache.log4j.spi.ThrowableInformation: ...
    def getThrowableStrRep(self) -> typing.List[str]: ...
    def getTimeStamp(self) -> int: ...
    def locationInformationExists(self) -> bool: ...
    def setProperty(self, string: str, string2: str) -> None: ...

class NameAbbreviator:
    def __init__(self): ...
    def abbreviate(self, int: int, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def getAbbreviator(string: str) -> 'NameAbbreviator': ...
    @staticmethod
    def getDefaultAbbreviator() -> 'NameAbbreviator': ...

class PatternConverter:
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    def getName(self) -> str: ...
    def getStyleClass(self, object: typing.Any) -> str: ...

class PatternParser:
    @staticmethod
    def getFileNamePatternRules() -> java.util.Map: ...
    @staticmethod
    def getPatternLayoutRules() -> java.util.Map: ...
    @staticmethod
    def parse(string: str, list: java.util.List, list2: java.util.List, map: typing.Union[java.util.Map, typing.Mapping], map2: typing.Union[java.util.Map, typing.Mapping]) -> None: ...

class IntegerPatternConverter(PatternConverter):
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'IntegerPatternConverter': ...

class LoggingEventPatternConverter(PatternConverter):
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    def handlesThrowable(self) -> bool: ...

class DatePatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, date: java.util.Date, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'DatePatternConverter': ...

class FileLocationPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'FileLocationPatternConverter': ...

class FullLocationPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'FullLocationPatternConverter': ...

class LevelPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    def getStyleClass(self, object: typing.Any) -> str: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'LevelPatternConverter': ...

class LineLocationPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'LineLocationPatternConverter': ...

class LineSeparatorPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'LineSeparatorPatternConverter': ...

class LiteralPatternConverter(LoggingEventPatternConverter):
    def __init__(self, string: str): ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...

class MessagePatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'MessagePatternConverter': ...

class MethodLocationPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'MethodLocationPatternConverter': ...

class NDCPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'NDCPatternConverter': ...

class NamePatternConverter(LoggingEventPatternConverter): ...

class PropertiesPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'PropertiesPatternConverter': ...

class RelativeTimePatternConverter(LoggingEventPatternConverter):
    def __init__(self): ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'RelativeTimePatternConverter': ...

class SequenceNumberPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'SequenceNumberPatternConverter': ...

class ThreadPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'ThreadPatternConverter': ...

class ThrowableInformationPatternConverter(LoggingEventPatternConverter):
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    def handlesThrowable(self) -> bool: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'ThrowableInformationPatternConverter': ...

class ClassNamePatternConverter(NamePatternConverter):
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'ClassNamePatternConverter': ...

class LoggerPatternConverter(NamePatternConverter):
    @typing.overload
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent, stringBuffer: java.lang.StringBuffer) -> None: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer) -> None: ...
    @staticmethod
    def newInstance(stringArray: typing.List[str]) -> 'LoggerPatternConverter': ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.pattern")``.

    BridgePatternConverter: typing.Type[BridgePatternConverter]
    BridgePatternParser: typing.Type[BridgePatternParser]
    CachedDateFormat: typing.Type[CachedDateFormat]
    ClassNamePatternConverter: typing.Type[ClassNamePatternConverter]
    DatePatternConverter: typing.Type[DatePatternConverter]
    FileDatePatternConverter: typing.Type[FileDatePatternConverter]
    FileLocationPatternConverter: typing.Type[FileLocationPatternConverter]
    FormattingInfo: typing.Type[FormattingInfo]
    FullLocationPatternConverter: typing.Type[FullLocationPatternConverter]
    IntegerPatternConverter: typing.Type[IntegerPatternConverter]
    LevelPatternConverter: typing.Type[LevelPatternConverter]
    LineLocationPatternConverter: typing.Type[LineLocationPatternConverter]
    LineSeparatorPatternConverter: typing.Type[LineSeparatorPatternConverter]
    LiteralPatternConverter: typing.Type[LiteralPatternConverter]
    LogEvent: typing.Type[LogEvent]
    LoggerPatternConverter: typing.Type[LoggerPatternConverter]
    LoggingEventPatternConverter: typing.Type[LoggingEventPatternConverter]
    MessagePatternConverter: typing.Type[MessagePatternConverter]
    MethodLocationPatternConverter: typing.Type[MethodLocationPatternConverter]
    NDCPatternConverter: typing.Type[NDCPatternConverter]
    NameAbbreviator: typing.Type[NameAbbreviator]
    NamePatternConverter: typing.Type[NamePatternConverter]
    PatternConverter: typing.Type[PatternConverter]
    PatternParser: typing.Type[PatternParser]
    PropertiesPatternConverter: typing.Type[PropertiesPatternConverter]
    RelativeTimePatternConverter: typing.Type[RelativeTimePatternConverter]
    SequenceNumberPatternConverter: typing.Type[SequenceNumberPatternConverter]
    ThreadPatternConverter: typing.Type[ThreadPatternConverter]
    ThrowableInformationPatternConverter: typing.Type[ThrowableInformationPatternConverter]
