import javax.management
import org.apache.log4j
import org.apache.log4j.spi
import typing



class AbstractDynamicMBean(javax.management.DynamicMBean, javax.management.MBeanRegistration):
    def __init__(self): ...
    def getAttributes(self, stringArray: typing.List[str]) -> javax.management.AttributeList: ...
    def postDeregister(self) -> None: ...
    def postRegister(self, boolean: bool) -> None: ...
    def preDeregister(self) -> None: ...
    def preRegister(self, mBeanServer: javax.management.MBeanServer, objectName: javax.management.ObjectName) -> javax.management.ObjectName: ...
    def setAttributes(self, attributeList: javax.management.AttributeList) -> javax.management.AttributeList: ...

class Agent:
    def __init__(self): ...
    def start(self) -> None: ...

class AppenderDynamicMBean(AbstractDynamicMBean):
    def __init__(self, appender: org.apache.log4j.Appender): ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getMBeanInfo(self) -> javax.management.MBeanInfo: ...
    def invoke(self, string: str, objectArray: typing.List[typing.Any], stringArray: typing.List[str]) -> typing.Any: ...
    def preRegister(self, mBeanServer: javax.management.MBeanServer, objectName: javax.management.ObjectName) -> javax.management.ObjectName: ...
    def setAttribute(self, attribute: javax.management.Attribute) -> None: ...

class HierarchyDynamicMBean(AbstractDynamicMBean, org.apache.log4j.spi.HierarchyEventListener, javax.management.NotificationBroadcaster):
    def __init__(self): ...
    def addAppenderEvent(self, category: org.apache.log4j.Category, appender: org.apache.log4j.Appender) -> None: ...
    def addLoggerMBean(self, string: str) -> javax.management.ObjectName: ...
    def addNotificationListener(self, notificationListener: javax.management.NotificationListener, notificationFilter: javax.management.NotificationFilter, object: typing.Any) -> None: ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getMBeanInfo(self) -> javax.management.MBeanInfo: ...
    def getNotificationInfo(self) -> typing.List[javax.management.MBeanNotificationInfo]: ...
    def invoke(self, string: str, objectArray: typing.List[typing.Any], stringArray: typing.List[str]) -> typing.Any: ...
    def postRegister(self, boolean: bool) -> None: ...
    def removeAppenderEvent(self, category: org.apache.log4j.Category, appender: org.apache.log4j.Appender) -> None: ...
    def removeNotificationListener(self, notificationListener: javax.management.NotificationListener) -> None: ...
    def setAttribute(self, attribute: javax.management.Attribute) -> None: ...

class LayoutDynamicMBean(AbstractDynamicMBean):
    def __init__(self, layout: org.apache.log4j.Layout): ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getMBeanInfo(self) -> javax.management.MBeanInfo: ...
    def invoke(self, string: str, objectArray: typing.List[typing.Any], stringArray: typing.List[str]) -> typing.Any: ...
    def setAttribute(self, attribute: javax.management.Attribute) -> None: ...

class LoggerDynamicMBean(AbstractDynamicMBean, javax.management.NotificationListener):
    def __init__(self, logger: org.apache.log4j.Logger): ...
    def getAttribute(self, string: str) -> typing.Any: ...
    def getMBeanInfo(self) -> javax.management.MBeanInfo: ...
    def handleNotification(self, notification: javax.management.Notification, object: typing.Any) -> None: ...
    def invoke(self, string: str, objectArray: typing.List[typing.Any], stringArray: typing.List[str]) -> typing.Any: ...
    def postRegister(self, boolean: bool) -> None: ...
    def setAttribute(self, attribute: javax.management.Attribute) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.jmx")``.

    AbstractDynamicMBean: typing.Type[AbstractDynamicMBean]
    Agent: typing.Type[Agent]
    AppenderDynamicMBean: typing.Type[AppenderDynamicMBean]
    HierarchyDynamicMBean: typing.Type[HierarchyDynamicMBean]
    LayoutDynamicMBean: typing.Type[LayoutDynamicMBean]
    LoggerDynamicMBean: typing.Type[LoggerDynamicMBean]
