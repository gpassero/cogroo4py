import java.io
import java.lang
import java.net
import org.apache.log4j
import org.apache.log4j.spi
import typing



class DenyAllFilter(org.apache.log4j.spi.Filter):
    def __init__(self): ...
    def decide(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> int: ...
    def getOptionStrings(self) -> typing.List[str]: ...
    def setOption(self, string: str, string2: str) -> None: ...

class ExternallyRolledFileAppender(org.apache.log4j.RollingFileAppender):
    ROLL_OVER: typing.ClassVar[str] = ...
    OK: typing.ClassVar[str] = ...
    def __init__(self): ...
    def activateOptions(self) -> None: ...
    def getPort(self) -> int: ...
    def setPort(self, int: int) -> None: ...

class FallbackErrorHandler(org.apache.log4j.spi.ErrorHandler):
    def __init__(self): ...
    def activateOptions(self) -> None: ...
    @typing.overload
    def error(self, string: str) -> None: ...
    @typing.overload
    def error(self, string: str, exception: java.lang.Exception, int: int) -> None: ...
    @typing.overload
    def error(self, string: str, exception: java.lang.Exception, int: int, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def setAppender(self, appender: org.apache.log4j.Appender) -> None: ...
    def setBackupAppender(self, appender: org.apache.log4j.Appender) -> None: ...
    def setLogger(self, logger: org.apache.log4j.Logger) -> None: ...

class LevelMatchFilter(org.apache.log4j.spi.Filter):
    def __init__(self): ...
    def decide(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> int: ...
    def getAcceptOnMatch(self) -> bool: ...
    def getLevelToMatch(self) -> str: ...
    def setAcceptOnMatch(self, boolean: bool) -> None: ...
    def setLevelToMatch(self, string: str) -> None: ...

class LevelRangeFilter(org.apache.log4j.spi.Filter):
    def __init__(self): ...
    def decide(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> int: ...
    def getAcceptOnMatch(self) -> bool: ...
    def getLevelMax(self) -> org.apache.log4j.Level: ...
    def getLevelMin(self) -> org.apache.log4j.Level: ...
    def setAcceptOnMatch(self, boolean: bool) -> None: ...
    def setLevelMax(self, level: org.apache.log4j.Level) -> None: ...
    def setLevelMin(self, level: org.apache.log4j.Level) -> None: ...

class NullAppender(org.apache.log4j.AppenderSkeleton):
    def __init__(self): ...
    def activateOptions(self) -> None: ...
    def close(self) -> None: ...
    def doAppend(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> None: ...
    def getInstance(self) -> 'NullAppender': ...
    @staticmethod
    def getNullAppender() -> 'NullAppender': ...
    def requiresLayout(self) -> bool: ...

class ReloadingPropertyConfigurator(org.apache.log4j.spi.Configurator):
    def __init__(self): ...
    @typing.overload
    def doConfigure(self, inputStream: java.io.InputStream, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @typing.overload
    def doConfigure(self, uRL: java.net.URL, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...

class Roller:
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...

class StringMatchFilter(org.apache.log4j.spi.Filter):
    STRING_TO_MATCH_OPTION: typing.ClassVar[str] = ...
    ACCEPT_ON_MATCH_OPTION: typing.ClassVar[str] = ...
    def __init__(self): ...
    def decide(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> int: ...
    def getAcceptOnMatch(self) -> bool: ...
    def getOptionStrings(self) -> typing.List[str]: ...
    def getStringToMatch(self) -> str: ...
    def setAcceptOnMatch(self, boolean: bool) -> None: ...
    def setOption(self, string: str, string2: str) -> None: ...
    def setStringToMatch(self, string: str) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.varia")``.

    DenyAllFilter: typing.Type[DenyAllFilter]
    ExternallyRolledFileAppender: typing.Type[ExternallyRolledFileAppender]
    FallbackErrorHandler: typing.Type[FallbackErrorHandler]
    LevelMatchFilter: typing.Type[LevelMatchFilter]
    LevelRangeFilter: typing.Type[LevelRangeFilter]
    NullAppender: typing.Type[NullAppender]
    ReloadingPropertyConfigurator: typing.Type[ReloadingPropertyConfigurator]
    Roller: typing.Type[Roller]
    StringMatchFilter: typing.Type[StringMatchFilter]
