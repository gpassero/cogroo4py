import java.io
import java.net
import java.util
import org.apache.log4j
import org.apache.log4j.config
import org.apache.log4j.spi
import org.w3c.dom
import org.xml.sax
import typing



class DOMConfigurator(org.apache.log4j.spi.Configurator):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def configure(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def configure(uRL: java.net.URL) -> None: ...
    @typing.overload
    @staticmethod
    def configure(element: org.w3c.dom.Element) -> None: ...
    @typing.overload
    @staticmethod
    def configureAndWatch(string: str) -> None: ...
    @typing.overload
    @staticmethod
    def configureAndWatch(string: str, long: int) -> None: ...
    @typing.overload
    def doConfigure(self, inputStream: java.io.InputStream, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @typing.overload
    def doConfigure(self, reader: java.io.Reader, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @typing.overload
    def doConfigure(self, string: str, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @typing.overload
    def doConfigure(self, uRL: java.net.URL, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @typing.overload
    def doConfigure(self, element: org.w3c.dom.Element, loggerRepository: org.apache.log4j.spi.LoggerRepository) -> None: ...
    @staticmethod
    def parseElement(element: org.w3c.dom.Element, properties: java.util.Properties, class_: typing.Type) -> typing.Any: ...
    @staticmethod
    def setParameter(element: org.w3c.dom.Element, propertySetter: org.apache.log4j.config.PropertySetter, properties: java.util.Properties) -> None: ...
    @staticmethod
    def subst(string: str, properties: java.util.Properties) -> str: ...

class Log4jEntityResolver(org.xml.sax.EntityResolver):
    def __init__(self): ...
    def resolveEntity(self, string: str, string2: str) -> org.xml.sax.InputSource: ...

class SAXErrorHandler(org.xml.sax.ErrorHandler):
    def __init__(self): ...
    def error(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...
    def fatalError(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...
    def warning(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...

class UnrecognizedElementHandler:
    def parseUnrecognizedElement(self, element: org.w3c.dom.Element, properties: java.util.Properties) -> bool: ...

class XMLLayout(org.apache.log4j.Layout):
    def __init__(self): ...
    def activateOptions(self) -> None: ...
    def format(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> str: ...
    def getLocationInfo(self) -> bool: ...
    def getProperties(self) -> bool: ...
    def ignoresThrowable(self) -> bool: ...
    def setLocationInfo(self, boolean: bool) -> None: ...
    def setProperties(self, boolean: bool) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.xml")``.

    DOMConfigurator: typing.Type[DOMConfigurator]
    Log4jEntityResolver: typing.Type[Log4jEntityResolver]
    SAXErrorHandler: typing.Type[SAXErrorHandler]
    UnrecognizedElementHandler: typing.Type[UnrecognizedElementHandler]
    XMLLayout: typing.Type[XMLLayout]
