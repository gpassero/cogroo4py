import java.util
import org.apache.log4j
import org.apache.log4j.spi
import org.apache.log4j.xml
import org.w3c.dom
import typing



class RewriteAppender(org.apache.log4j.AppenderSkeleton, org.apache.log4j.spi.AppenderAttachable, org.apache.log4j.xml.UnrecognizedElementHandler):
    def __init__(self): ...
    def addAppender(self, appender: org.apache.log4j.Appender) -> None: ...
    def close(self) -> None: ...
    def getAllAppenders(self) -> java.util.Enumeration: ...
    def getAppender(self, string: str) -> org.apache.log4j.Appender: ...
    def isAttached(self, appender: org.apache.log4j.Appender) -> bool: ...
    def parseUnrecognizedElement(self, element: org.w3c.dom.Element, properties: java.util.Properties) -> bool: ...
    def removeAllAppenders(self) -> None: ...
    @typing.overload
    def removeAppender(self, string: str) -> None: ...
    @typing.overload
    def removeAppender(self, appender: org.apache.log4j.Appender) -> None: ...
    def requiresLayout(self) -> bool: ...
    def setRewritePolicy(self, rewritePolicy: 'RewritePolicy') -> None: ...

class RewritePolicy:
    def rewrite(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> org.apache.log4j.spi.LoggingEvent: ...

class MapRewritePolicy(RewritePolicy):
    def __init__(self): ...
    def rewrite(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> org.apache.log4j.spi.LoggingEvent: ...

class PropertyRewritePolicy(RewritePolicy):
    def __init__(self): ...
    def rewrite(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> org.apache.log4j.spi.LoggingEvent: ...
    def setProperties(self, string: str) -> None: ...

class ReflectionRewritePolicy(RewritePolicy):
    def __init__(self): ...
    def rewrite(self, loggingEvent: org.apache.log4j.spi.LoggingEvent) -> org.apache.log4j.spi.LoggingEvent: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.log4j.rewrite")``.

    MapRewritePolicy: typing.Type[MapRewritePolicy]
    PropertyRewritePolicy: typing.Type[PropertyRewritePolicy]
    ReflectionRewritePolicy: typing.Type[ReflectionRewritePolicy]
    RewriteAppender: typing.Type[RewriteAppender]
    RewritePolicy: typing.Type[RewritePolicy]
