import java.io
import opennlp.tools.cmdline
import org.cogroo.tools.featurizer
import typing



class FeaturizerConverterTool(opennlp.tools.cmdline.AbstractConverterTool[org.cogroo.tools.featurizer.FeatureSample]):
    def __init__(self): ...

class FeaturizerCrossValidatorTool(opennlp.tools.cmdline.AbstractCrossValidatorTool[org.cogroo.tools.featurizer.FeatureSample, 'FeaturizerCrossValidatorTool.CVToolParams']):
    def __init__(self): ...
    def getShortDescription(self) -> str: ...
    def run(self, string: str, stringArray: typing.List[str]) -> None: ...

class FeaturizerEvaluationErrorListener(opennlp.tools.cmdline.EvaluationErrorPrinter[org.cogroo.tools.featurizer.FeatureSample], org.cogroo.tools.featurizer.FeaturizerEvaluationMonitor):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream): ...
    def missclassified(self, featureSample: org.cogroo.tools.featurizer.FeatureSample, featureSample2: org.cogroo.tools.featurizer.FeatureSample) -> None: ...

class FeaturizerEvaluatorTool(opennlp.tools.cmdline.AbstractEvaluatorTool[org.cogroo.tools.featurizer.FeatureSample, 'FeaturizerEvaluatorTool.EvalToolParams']):
    def __init__(self): ...
    def getShortDescription(self) -> str: ...
    def run(self, string: str, stringArray: typing.List[str]) -> None: ...

class FeaturizerMETool(opennlp.tools.cmdline.BasicCmdLineTool):
    def __init__(self): ...
    def getHelp(self) -> str: ...
    def getShortDescription(self) -> str: ...
    def run(self, stringArray: typing.List[str]) -> None: ...

class FeaturizerModelLoader(opennlp.tools.cmdline.ModelLoader[org.cogroo.tools.featurizer.FeaturizerModel]):
    def __init__(self): ...

class FeaturizerTrainerTool(opennlp.tools.cmdline.AbstractTrainerTool[org.cogroo.tools.featurizer.FeatureSample, 'FeaturizerTrainerTool.TrainerToolParams']):
    def __init__(self): ...
    def getName(self) -> str: ...
    def getShortDescription(self) -> str: ...
    def run(self, string: str, stringArray: typing.List[str]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.cmdline.featurizer")``.

    FeaturizerConverterTool: typing.Type[FeaturizerConverterTool]
    FeaturizerCrossValidatorTool: typing.Type[FeaturizerCrossValidatorTool]
    FeaturizerEvaluationErrorListener: typing.Type[FeaturizerEvaluationErrorListener]
    FeaturizerEvaluatorTool: typing.Type[FeaturizerEvaluatorTool]
    FeaturizerMETool: typing.Type[FeaturizerMETool]
    FeaturizerModelLoader: typing.Type[FeaturizerModelLoader]
    FeaturizerTrainerTool: typing.Type[FeaturizerTrainerTool]
