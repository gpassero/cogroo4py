import java.io
import java.lang
import java.util
import morfologik.stemming
import opennlp.tools.postag
import org.cogroo.dictionary
import org.cogroo.tools.featurizer
import org.cogroo.util
import typing



class FSADictionary(opennlp.tools.postag.TagDictionary, org.cogroo.dictionary.LemmaDictionary, java.lang.Iterable[str]):
    @typing.overload
    @staticmethod
    def create(byteArray: typing.List[int], byteArray2: typing.List[int]) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    @staticmethod
    def create(string: str) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    @staticmethod
    def create(inputStream: java.io.InputStream, inputStream2: java.io.InputStream) -> 'FSADictionary': ...
    @staticmethod
    def createFromResources(string: str) -> 'FSADictionary': ...
    @staticmethod
    def getFSADictionaryData(string: str) -> typing.List[int]: ...
    @staticmethod
    def getFSADictionaryInfo(string: str) -> typing.List[int]: ...
    def getLemmas(self, string: str, string2: str) -> typing.List[str]: ...
    def getTags(self, string: str) -> typing.List[str]: ...
    def getTagsAndLemms(self, string: str) -> java.util.List[org.cogroo.util.PairWordPOSTag]: ...
    def iterator(self) -> java.util.Iterator[str]: ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...

class FSAFeatureDictionary(org.cogroo.dictionary.FeatureDictionary, java.lang.Iterable[org.cogroo.tools.featurizer.WordTag]):
    def __init__(self, dictionaryLookup: morfologik.stemming.DictionaryLookup): ...
    @typing.overload
    @staticmethod
    def create(byteArray: typing.List[int], byteArray2: typing.List[int]) -> org.cogroo.dictionary.FeatureDictionary: ...
    @typing.overload
    @staticmethod
    def create(inputStream: java.io.InputStream, inputStream2: java.io.InputStream) -> org.cogroo.dictionary.FeatureDictionary: ...
    @typing.overload
    @staticmethod
    def create(string: str) -> org.cogroo.dictionary.FeatureDictionary: ...
    @staticmethod
    def createFromResources(string: str) -> org.cogroo.dictionary.FeatureDictionary: ...
    @staticmethod
    def getFSADictionaryData(string: str) -> typing.List[int]: ...
    @staticmethod
    def getFSADictionaryInfo(string: str) -> typing.List[int]: ...
    def getFeatures(self, string: str, string2: str) -> typing.List[str]: ...
    def iterator(self) -> java.util.Iterator[org.cogroo.tools.featurizer.WordTag]: ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...

class FSASynthDictionary:
    def __init__(self, dictionaryLookup: morfologik.stemming.DictionaryLookup): ...
    @typing.overload
    @staticmethod
    def create(inputStream: java.io.InputStream, inputStream2: java.io.InputStream) -> 'FSASynthDictionary': ...
    @typing.overload
    @staticmethod
    def create(string: str) -> 'FSASynthDictionary': ...
    @staticmethod
    def createFromResources(string: str) -> 'FSASynthDictionary': ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...
    def synthesize(self, string: str) -> java.util.List[org.cogroo.util.PairWordPOSTag]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.dictionary.impl")``.

    FSADictionary: typing.Type[FSADictionary]
    FSAFeatureDictionary: typing.Type[FSAFeatureDictionary]
    FSASynthDictionary: typing.Type[FSASynthDictionary]
