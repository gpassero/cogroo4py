import java.io
import java.lang
import java.util
import opennlp.tools.util
import org.cogroo.entities
import org.cogroo.tools.checker.rules.model
import typing



class ChunkCogroo(org.cogroo.entities.Chunk):
    def __init__(self, list: java.util.List[org.cogroo.entities.Token], int: int): ...
    def setMorphologicalTag(self, morphologicalTag: 'MorphologicalTag') -> None: ...
    def toPlainText(self) -> str: ...

class ChunkTag(org.cogroo.entities.Tag):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getChunkFunction(self) -> org.cogroo.tools.checker.rules.model.TagMask.ChunkFunction: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def match(self, tag: org.cogroo.entities.Tag) -> bool: ...
    @typing.overload
    def match(self, tagMask: org.cogroo.tools.checker.rules.model.TagMask) -> bool: ...
    def setChunkFunction(self, chunkFunction: org.cogroo.tools.checker.rules.model.TagMask.ChunkFunction) -> None: ...
    def toString(self) -> str: ...
    def toVerboseString(self) -> str: ...

class MistakeImpl(org.cogroo.entities.Mistake, java.io.Serializable):
    def __init__(self, string: str, int: int, string2: str, string3: str, stringArray: typing.List[str], int2: int, int3: int, list: java.util.List[org.cogroo.tools.checker.rules.model.Example], string5: str): ...
    def getContext(self) -> str: ...
    def getEnd(self) -> int: ...
    def getFullMessage(self) -> str: ...
    def getLongMessage(self) -> str: ...
    def getRuleIdentifier(self) -> str: ...
    def getRulePriority(self) -> int: ...
    def getShortMessage(self) -> str: ...
    def getStart(self) -> int: ...
    def getSuggestions(self) -> typing.List[str]: ...
    def setEnd(self, int: int) -> None: ...
    def setStart(self, int: int) -> None: ...
    def setSuggestions(self, stringArray: typing.List[str]) -> None: ...
    def toString(self) -> str: ...

class MorphologicalTag(org.cogroo.entities.Tag, java.lang.Cloneable):
    def __init__(self): ...
    def clone(self) -> 'MorphologicalTag': ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAsTagList(self) -> java.util.List[str]: ...
    def getCase(self) -> org.cogroo.tools.checker.rules.model.TagMask.Case: ...
    def getClazzE(self) -> org.cogroo.tools.checker.rules.model.TagMask.Class: ...
    def getGenderE(self) -> org.cogroo.tools.checker.rules.model.TagMask.Gender: ...
    def getMood(self) -> org.cogroo.tools.checker.rules.model.TagMask.Mood: ...
    def getNumberE(self) -> org.cogroo.tools.checker.rules.model.TagMask.Number: ...
    def getPersonE(self) -> org.cogroo.tools.checker.rules.model.TagMask.Person: ...
    def getPunctuation(self) -> org.cogroo.tools.checker.rules.model.TagMask.Punctuation: ...
    def getTense(self) -> org.cogroo.tools.checker.rules.model.TagMask.Tense: ...
    def hashCode(self) -> int: ...
    def isEmpty(self) -> bool: ...
    @typing.overload
    def match(self, tag: org.cogroo.entities.Tag) -> bool: ...
    @typing.overload
    def match(self, morphologicalTag: 'MorphologicalTag') -> bool: ...
    @typing.overload
    def match(self, tagMask: org.cogroo.tools.checker.rules.model.TagMask) -> bool: ...
    @typing.overload
    def match(self, tagMask: org.cogroo.tools.checker.rules.model.TagMask, boolean: bool) -> bool: ...
    def matchExact(self, tagMask: org.cogroo.tools.checker.rules.model.TagMask, boolean: bool) -> bool: ...
    def setCase(self, case: org.cogroo.tools.checker.rules.model.TagMask.Case) -> None: ...
    def setClazz(self, class_: org.cogroo.tools.checker.rules.model.TagMask.Class) -> None: ...
    def setGender(self, gender: org.cogroo.tools.checker.rules.model.TagMask.Gender) -> None: ...
    def setMood(self, mood: org.cogroo.tools.checker.rules.model.TagMask.Mood) -> None: ...
    def setNumber(self, number: org.cogroo.tools.checker.rules.model.TagMask.Number) -> None: ...
    def setPerson(self, person: org.cogroo.tools.checker.rules.model.TagMask.Person) -> None: ...
    def setPunctuation(self, punctuation: org.cogroo.tools.checker.rules.model.TagMask.Punctuation) -> None: ...
    def setTense(self, tense: org.cogroo.tools.checker.rules.model.TagMask.Tense) -> None: ...
    def toString(self) -> str: ...
    def toVerboseString(self) -> str: ...

class SentenceCogroo(org.cogroo.entities.Sentence):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, list: java.util.List[org.cogroo.entities.Token]): ...
    def getAnalysisAsString(self) -> str: ...
    def toPlainText(self) -> str: ...

class SyntacticTag(org.cogroo.entities.Tag):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getSyntacticFunction(self) -> org.cogroo.tools.checker.rules.model.TagMask.SyntacticFunction: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def match(self, tag: org.cogroo.entities.Tag) -> bool: ...
    @typing.overload
    def match(self, tagMask: org.cogroo.tools.checker.rules.model.TagMask) -> bool: ...
    def setSyntacticFunction(self, syntacticFunction: org.cogroo.tools.checker.rules.model.TagMask.SyntacticFunction) -> None: ...
    def toString(self) -> str: ...
    def toVerboseString(self) -> str: ...

class TokenCogroo(org.cogroo.entities.Token):
    @typing.overload
    def __init__(self, string: str, int: int): ...
    @typing.overload
    def __init__(self, string: str, span: opennlp.tools.util.Span): ...
    @typing.overload
    def __init__(self, span: opennlp.tools.util.Span): ...
    def setLexeme(self, string: str) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.entities.impl")``.

    ChunkCogroo: typing.Type[ChunkCogroo]
    ChunkTag: typing.Type[ChunkTag]
    MistakeImpl: typing.Type[MistakeImpl]
    MorphologicalTag: typing.Type[MorphologicalTag]
    SentenceCogroo: typing.Type[SentenceCogroo]
    SyntacticTag: typing.Type[SyntacticTag]
    TokenCogroo: typing.Type[TokenCogroo]
