import java.io
import java.lang
import java.util
import opennlp.tools.util
import org.cogroo.entities.impl
import org.cogroo.entities.tree
import org.cogroo.text
import org.cogroo.tools.checker.rules.model
import typing



class HeadedSpan(opennlp.tools.util.Span):
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str): ...
    @typing.overload
    def __init__(self, span: opennlp.tools.util.Span, int: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getHead(self) -> int: ...
    def hashCode(self) -> int: ...
    def setHead(self, int: int) -> None: ...
    def toString(self) -> str: ...

class LexemeTypes(java.lang.Enum['LexemeTypes']):
    WORD: typing.ClassVar['LexemeTypes'] = ...
    COMPOUND_WORD_SEQUENCE: typing.ClassVar['LexemeTypes'] = ...
    OPENING_PUNCTUATION_MARK: typing.ClassVar['LexemeTypes'] = ...
    CLOSING_PUNCTUATION_MARK: typing.ClassVar['LexemeTypes'] = ...
    ANOTHER_MARK: typing.ClassVar['LexemeTypes'] = ...
    NUMBER: typing.ClassVar['LexemeTypes'] = ...
    HYPHEN: typing.ClassVar['LexemeTypes'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LexemeTypes': ...
    @staticmethod
    def values() -> typing.List['LexemeTypes']: ...

class Mistake:
    def getContext(self) -> str: ...
    def getEnd(self) -> int: ...
    def getFullMessage(self) -> str: ...
    def getLongMessage(self) -> str: ...
    def getRuleIdentifier(self) -> str: ...
    def getRulePriority(self) -> int: ...
    def getShortMessage(self) -> str: ...
    def getStart(self) -> int: ...
    def getSuggestions(self) -> typing.List[str]: ...
    def setSuggestions(self, stringArray: typing.List[str]) -> None: ...

class SyntacticChunk(java.io.Serializable):
    def __init__(self, list: java.util.List['Chunk']): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getChildChunks(self) -> java.util.List['Chunk']: ...
    def getFirstToken(self) -> int: ...
    def getMorphologicalTag(self) -> org.cogroo.entities.impl.MorphologicalTag: ...
    def getMorphologicalTag2xx(self) -> org.cogroo.entities.impl.MorphologicalTag: ...
    def getSyntacticTag(self) -> org.cogroo.entities.impl.SyntacticTag: ...
    def getTokens(self) -> java.util.List['Token']: ...
    def hashCode(self) -> int: ...
    def setSyntacticTag(self, syntacticTag: org.cogroo.entities.impl.SyntacticTag) -> None: ...
    def toPlainText(self) -> str: ...
    def toString(self) -> str: ...

class Tag(java.io.Serializable):
    def __init__(self): ...
    @typing.overload
    def match(self, tagMask: org.cogroo.tools.checker.rules.model.TagMask) -> bool: ...
    @typing.overload
    def match(self, tag: 'Tag') -> bool: ...
    def toVerboseString(self) -> str: ...

class Token(java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, int2: int): ...
    @typing.overload
    def __init__(self, span: opennlp.tools.util.Span): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getChunk(self) -> 'Chunk': ...
    def getChunkTag(self) -> org.cogroo.entities.impl.ChunkTag: ...
    def getLexeme(self) -> str: ...
    def getLexemeType(self) -> LexemeTypes: ...
    def getMorphologicalTag(self) -> org.cogroo.entities.impl.MorphologicalTag: ...
    def getPrimitive(self) -> typing.List[str]: ...
    def getSpan(self) -> opennlp.tools.util.Span: ...
    def getSyntacticChunk(self) -> SyntacticChunk: ...
    def getSyntacticTag(self) -> org.cogroo.entities.impl.SyntacticTag: ...
    def hashCode(self) -> int: ...
    def setChunk(self, chunk: 'Chunk') -> None: ...
    def setChunkTag(self, chunkTag: org.cogroo.entities.impl.ChunkTag) -> None: ...
    def setLexeme(self, string: str) -> None: ...
    def setMorphologicalTag(self, morphologicalTag: org.cogroo.entities.impl.MorphologicalTag) -> None: ...
    def setPrimitive(self, stringArray: typing.List[str]) -> None: ...
    def setSpan(self, span: opennlp.tools.util.Span) -> None: ...
    def setSyntacticChunk(self, syntacticChunk: SyntacticChunk) -> None: ...
    def toString(self) -> str: ...

class TokenGroup:
    def getTokens(self) -> java.util.List[Token]: ...

class Chunk(java.io.Serializable, TokenGroup):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getFirstToken(self) -> int: ...
    def getMainToken(self) -> Token: ...
    def getMorphologicalTag(self) -> org.cogroo.entities.impl.MorphologicalTag: ...
    def getRelativeHeadIndex(self) -> int: ...
    def getSyntacticTag(self) -> org.cogroo.entities.impl.SyntacticTag: ...
    def getTokens(self) -> java.util.List[Token]: ...
    def getType(self) -> str: ...
    def hashCode(self) -> int: ...
    def setFirstToken(self, int: int) -> None: ...
    def setMorphologicalTag(self, morphologicalTag: org.cogroo.entities.impl.MorphologicalTag) -> None: ...
    def setType(self, string: str) -> None: ...
    def toPlainText(self) -> str: ...
    def toString(self) -> str: ...

class Sentence(java.io.Serializable, TokenGroup):
    def __init__(self): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getChunks(self) -> java.util.List[Chunk]: ...
    def getDocumentText(self) -> str: ...
    def getOffset(self) -> int: ...
    def getRoot(self) -> org.cogroo.entities.tree.Node: ...
    def getSentence(self) -> str: ...
    def getSpan(self) -> opennlp.tools.util.Span: ...
    def getSyntacticChunks(self) -> java.util.List[SyntacticChunk]: ...
    def getSyntaxTree(self) -> str: ...
    def getTextSentence(self) -> org.cogroo.text.Sentence: ...
    def getTokens(self) -> java.util.List[Token]: ...
    def getTree(self) -> str: ...
    def hashCode(self) -> int: ...
    def setChunks(self, list: java.util.List[Chunk]) -> None: ...
    def setDocumentText(self, string: str) -> None: ...
    def setOffset(self, int: int) -> None: ...
    def setRoot(self, node: org.cogroo.entities.tree.Node) -> None: ...
    def setSentence(self, string: str) -> None: ...
    def setSpan(self, span: opennlp.tools.util.Span) -> None: ...
    def setSyntacticChunks(self, list: java.util.List[SyntacticChunk]) -> None: ...
    def setTextSentence(self, sentence: org.cogroo.text.Sentence) -> None: ...
    def setTokens(self, list: java.util.List[Token]) -> None: ...
    def toPlainText(self) -> str: ...
    def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.entities")``.

    Chunk: typing.Type[Chunk]
    HeadedSpan: typing.Type[HeadedSpan]
    LexemeTypes: typing.Type[LexemeTypes]
    Mistake: typing.Type[Mistake]
    Sentence: typing.Type[Sentence]
    SyntacticChunk: typing.Type[SyntacticChunk]
    Tag: typing.Type[Tag]
    Token: typing.Type[Token]
    TokenGroup: typing.Type[TokenGroup]
    impl: org.cogroo.entities.impl.__module_protocol__
    tree: org.cogroo.entities.tree.__module_protocol__
