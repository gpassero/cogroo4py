import org.cogroo.entities.impl
import org.cogroo.tools.checker.rules.model
import typing



class TagInterpreter:
    def parseChunkTag(self, string: str) -> org.cogroo.entities.impl.ChunkTag: ...
    def parseMorphologicalTag(self, string: str) -> org.cogroo.entities.impl.MorphologicalTag: ...
    def parseSyntacticTag(self, string: str) -> org.cogroo.entities.impl.SyntacticTag: ...
    @typing.overload
    def serialize(self, chunkTag: org.cogroo.entities.impl.ChunkTag) -> str: ...
    @typing.overload
    def serialize(self, morphologicalTag: org.cogroo.entities.impl.MorphologicalTag) -> str: ...
    @typing.overload
    def serialize(self, syntacticTag: org.cogroo.entities.impl.SyntacticTag) -> str: ...
    @typing.overload
    def serialize(self, case: org.cogroo.tools.checker.rules.model.TagMask.Case) -> str: ...
    @typing.overload
    def serialize(self, chunkFunction: org.cogroo.tools.checker.rules.model.TagMask.ChunkFunction) -> str: ...
    @typing.overload
    def serialize(self, class_: org.cogroo.tools.checker.rules.model.TagMask.Class) -> str: ...
    @typing.overload
    def serialize(self, gender: org.cogroo.tools.checker.rules.model.TagMask.Gender) -> str: ...
    @typing.overload
    def serialize(self, mood: org.cogroo.tools.checker.rules.model.TagMask.Mood) -> str: ...
    @typing.overload
    def serialize(self, number: org.cogroo.tools.checker.rules.model.TagMask.Number) -> str: ...
    @typing.overload
    def serialize(self, person: org.cogroo.tools.checker.rules.model.TagMask.Person) -> str: ...
    @typing.overload
    def serialize(self, punctuation: org.cogroo.tools.checker.rules.model.TagMask.Punctuation) -> str: ...
    @typing.overload
    def serialize(self, syntacticFunction: org.cogroo.tools.checker.rules.model.TagMask.SyntacticFunction) -> str: ...
    @typing.overload
    def serialize(self, tense: org.cogroo.tools.checker.rules.model.TagMask.Tense) -> str: ...

class FlorestaTagInterpreter(TagInterpreter):
    def __init__(self): ...
    def parseChunkTag(self, string: str) -> org.cogroo.entities.impl.ChunkTag: ...
    def parseMorphologicalTag(self, string: str) -> org.cogroo.entities.impl.MorphologicalTag: ...
    def parseSyntacticTag(self, string: str) -> org.cogroo.entities.impl.SyntacticTag: ...
    @typing.overload
    def serialize(self, chunkTag: org.cogroo.entities.impl.ChunkTag) -> str: ...
    @typing.overload
    def serialize(self, morphologicalTag: org.cogroo.entities.impl.MorphologicalTag) -> str: ...
    @typing.overload
    def serialize(self, syntacticTag: org.cogroo.entities.impl.SyntacticTag) -> str: ...
    @typing.overload
    def serialize(self, case: org.cogroo.tools.checker.rules.model.TagMask.Case) -> str: ...
    @typing.overload
    def serialize(self, chunkFunction: org.cogroo.tools.checker.rules.model.TagMask.ChunkFunction) -> str: ...
    @typing.overload
    def serialize(self, class_: org.cogroo.tools.checker.rules.model.TagMask.Class) -> str: ...
    @typing.overload
    def serialize(self, gender: org.cogroo.tools.checker.rules.model.TagMask.Gender) -> str: ...
    @typing.overload
    def serialize(self, mood: org.cogroo.tools.checker.rules.model.TagMask.Mood) -> str: ...
    @typing.overload
    def serialize(self, number: org.cogroo.tools.checker.rules.model.TagMask.Number) -> str: ...
    @typing.overload
    def serialize(self, person: org.cogroo.tools.checker.rules.model.TagMask.Person) -> str: ...
    @typing.overload
    def serialize(self, punctuation: org.cogroo.tools.checker.rules.model.TagMask.Punctuation) -> str: ...
    @typing.overload
    def serialize(self, syntacticFunction: org.cogroo.tools.checker.rules.model.TagMask.SyntacticFunction) -> str: ...
    @typing.overload
    def serialize(self, tense: org.cogroo.tools.checker.rules.model.TagMask.Tense) -> str: ...

class JspellTagInterpreter(TagInterpreter):
    def __init__(self): ...
    def parseChunkTag(self, string: str) -> org.cogroo.entities.impl.ChunkTag: ...
    def parseMorphologicalTag(self, string: str) -> org.cogroo.entities.impl.MorphologicalTag: ...
    def parseSyntacticTag(self, string: str) -> org.cogroo.entities.impl.SyntacticTag: ...
    @typing.overload
    def serialize(self, chunkTag: org.cogroo.entities.impl.ChunkTag) -> str: ...
    @typing.overload
    def serialize(self, morphologicalTag: org.cogroo.entities.impl.MorphologicalTag) -> str: ...
    @typing.overload
    def serialize(self, syntacticTag: org.cogroo.entities.impl.SyntacticTag) -> str: ...
    @typing.overload
    def serialize(self, case: org.cogroo.tools.checker.rules.model.TagMask.Case) -> str: ...
    @typing.overload
    def serialize(self, chunkFunction: org.cogroo.tools.checker.rules.model.TagMask.ChunkFunction) -> str: ...
    @typing.overload
    def serialize(self, class_: org.cogroo.tools.checker.rules.model.TagMask.Class) -> str: ...
    @typing.overload
    def serialize(self, gender: org.cogroo.tools.checker.rules.model.TagMask.Gender) -> str: ...
    @typing.overload
    def serialize(self, mood: org.cogroo.tools.checker.rules.model.TagMask.Mood) -> str: ...
    @typing.overload
    def serialize(self, number: org.cogroo.tools.checker.rules.model.TagMask.Number) -> str: ...
    @typing.overload
    def serialize(self, person: org.cogroo.tools.checker.rules.model.TagMask.Person) -> str: ...
    @typing.overload
    def serialize(self, punctuation: org.cogroo.tools.checker.rules.model.TagMask.Punctuation) -> str: ...
    @typing.overload
    def serialize(self, syntacticFunction: org.cogroo.tools.checker.rules.model.TagMask.SyntacticFunction) -> str: ...
    @typing.overload
    def serialize(self, tense: org.cogroo.tools.checker.rules.model.TagMask.Tense) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.interpreters")``.

    FlorestaTagInterpreter: typing.Type[FlorestaTagInterpreter]
    JspellTagInterpreter: typing.Type[JspellTagInterpreter]
    TagInterpreter: typing.Type[TagInterpreter]
