import java.util
import opennlp.tools.chunker
import opennlp.tools.formats
import opennlp.tools.namefind
import opennlp.tools.postag
import opennlp.tools.util
import org.cogroo.tools.featurizer
import typing



class ADChunk2SampleStream(opennlp.tools.util.ObjectStream[opennlp.tools.chunker.ChunkSample]):
    OTHER: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, inputStreamFactory: opennlp.tools.util.InputStreamFactory, string: str): ...
    @typing.overload
    def __init__(self, objectStream: opennlp.tools.util.ObjectStream[str]): ...
    def close(self) -> None: ...
    @staticmethod
    def convertFuncTag(string: str, boolean: bool) -> str: ...
    def read(self) -> opennlp.tools.chunker.ChunkSample: ...
    def reset(self) -> None: ...
    def setEnd(self, int: int) -> None: ...
    def setStart(self, int: int) -> None: ...

class ADChunkBasedHeadFinderSampleStreamFactory(opennlp.tools.formats.LanguageSampleStreamFactory[opennlp.tools.chunker.ChunkSample]):
    def create(self, stringArray: typing.List[str]) -> opennlp.tools.util.ObjectStream[opennlp.tools.chunker.ChunkSample]: ...
    def getUsage(self) -> str: ...
    @staticmethod
    def registerFactory() -> None: ...
    def validateArguments(self, stringArray: typing.List[str]) -> str: ...

class ADChunkBasedShallowParserSampleStreamFactory(opennlp.tools.formats.LanguageSampleStreamFactory[opennlp.tools.chunker.ChunkSample]):
    def create(self, stringArray: typing.List[str]) -> opennlp.tools.util.ObjectStream[opennlp.tools.chunker.ChunkSample]: ...
    @staticmethod
    def registerFactory() -> None: ...

class ADChunkSampleStreamFactory(opennlp.tools.formats.LanguageSampleStreamFactory[opennlp.tools.chunker.ChunkSample]):
    def create(self, stringArray: typing.List[str]) -> opennlp.tools.util.ObjectStream[opennlp.tools.chunker.ChunkSample]: ...
    @staticmethod
    def registerFactory() -> None: ...

class ADContractionNameSampleStream(opennlp.tools.util.ObjectStream[opennlp.tools.namefind.NameSample]):
    @typing.overload
    def __init__(self, inputStreamFactory: opennlp.tools.util.InputStreamFactory, string: str, set: java.util.Set[str]): ...
    @typing.overload
    def __init__(self, objectStream: opennlp.tools.util.ObjectStream[str], set: java.util.Set[str]): ...
    def close(self) -> None: ...
    def read(self) -> opennlp.tools.namefind.NameSample: ...
    def reset(self) -> None: ...

class ADContractionNameSampleStreamFactory(opennlp.tools.formats.LanguageSampleStreamFactory[opennlp.tools.namefind.NameSample]):
    def create(self, stringArray: typing.List[str]) -> opennlp.tools.util.ObjectStream[opennlp.tools.namefind.NameSample]: ...
    @staticmethod
    def registerFactory() -> None: ...

class ADExPOSSampleStream(opennlp.tools.util.ObjectStream[opennlp.tools.postag.POSSample]):
    def __init__(self, objectStream: opennlp.tools.util.ObjectStream[str], boolean: bool, boolean2: bool, boolean3: bool): ...
    def close(self) -> None: ...
    def read(self) -> opennlp.tools.postag.POSSample: ...
    def reset(self) -> None: ...

class ADExPOSSampleStreamFactory(opennlp.tools.formats.LanguageSampleStreamFactory[opennlp.tools.postag.POSSample]):
    def create(self, stringArray: typing.List[str]) -> opennlp.tools.util.ObjectStream[opennlp.tools.postag.POSSample]: ...
    @staticmethod
    def registerFactory() -> None: ...

class ADExpNameSampleStream(opennlp.tools.util.ObjectStream[opennlp.tools.namefind.NameSample]):
    @typing.overload
    def __init__(self, inputStreamFactory: opennlp.tools.util.InputStreamFactory, string: str, set: java.util.Set[str], boolean: bool): ...
    @typing.overload
    def __init__(self, objectStream: opennlp.tools.util.ObjectStream[str], set: java.util.Set[str], boolean: bool): ...
    def close(self) -> None: ...
    def read(self) -> opennlp.tools.namefind.NameSample: ...
    def reset(self) -> None: ...

class ADExpNameSampleStreamFactory(opennlp.tools.formats.LanguageSampleStreamFactory[opennlp.tools.namefind.NameSample]):
    def create(self, stringArray: typing.List[str]) -> opennlp.tools.util.ObjectStream[opennlp.tools.namefind.NameSample]: ...
    @staticmethod
    def registerFactory() -> None: ...

class ADFeatureSampleStreamFactory(opennlp.tools.formats.LanguageSampleStreamFactory[org.cogroo.tools.featurizer.FeatureSample]):
    def create(self, stringArray: typing.List[str]) -> opennlp.tools.util.ObjectStream[org.cogroo.tools.featurizer.FeatureSample]: ...
    @staticmethod
    def registerFactory() -> None: ...

class ADFeaturizerSampleStream(opennlp.tools.util.ObjectStream[org.cogroo.tools.featurizer.FeatureSample]):
    @typing.overload
    def __init__(self, inputStreamFactory: opennlp.tools.util.InputStreamFactory, string: str, boolean: bool): ...
    @typing.overload
    def __init__(self, objectStream: opennlp.tools.util.ObjectStream[str], boolean: bool): ...
    def close(self) -> None: ...
    def read(self) -> org.cogroo.tools.featurizer.FeatureSample: ...
    def reset(self) -> None: ...
    def setEnd(self, int: int) -> None: ...
    def setStart(self, int: int) -> None: ...

class ADChunkBasedHeadFinderSampleStream(ADChunk2SampleStream):
    @typing.overload
    def __init__(self, inputStreamFactory: opennlp.tools.util.InputStreamFactory, string: str): ...
    @typing.overload
    def __init__(self, objectStream: opennlp.tools.util.ObjectStream[str]): ...
    def read(self) -> opennlp.tools.chunker.ChunkSample: ...

class ADChunkBasedShallowParserSampleStream(ADChunk2SampleStream):
    @typing.overload
    def __init__(self, inputStreamFactory: opennlp.tools.util.InputStreamFactory, string: str, string2: str, boolean: bool, boolean2: bool, boolean3: bool): ...
    @typing.overload
    def __init__(self, objectStream: opennlp.tools.util.ObjectStream[str], string: str, boolean: bool, boolean2: bool, boolean3: bool): ...
    def read(self) -> opennlp.tools.chunker.ChunkSample: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.formats.ad")``.

    ADChunk2SampleStream: typing.Type[ADChunk2SampleStream]
    ADChunkBasedHeadFinderSampleStream: typing.Type[ADChunkBasedHeadFinderSampleStream]
    ADChunkBasedHeadFinderSampleStreamFactory: typing.Type[ADChunkBasedHeadFinderSampleStreamFactory]
    ADChunkBasedShallowParserSampleStream: typing.Type[ADChunkBasedShallowParserSampleStream]
    ADChunkBasedShallowParserSampleStreamFactory: typing.Type[ADChunkBasedShallowParserSampleStreamFactory]
    ADChunkSampleStreamFactory: typing.Type[ADChunkSampleStreamFactory]
    ADContractionNameSampleStream: typing.Type[ADContractionNameSampleStream]
    ADContractionNameSampleStreamFactory: typing.Type[ADContractionNameSampleStreamFactory]
    ADExPOSSampleStream: typing.Type[ADExPOSSampleStream]
    ADExPOSSampleStreamFactory: typing.Type[ADExPOSSampleStreamFactory]
    ADExpNameSampleStream: typing.Type[ADExpNameSampleStream]
    ADExpNameSampleStreamFactory: typing.Type[ADExpNameSampleStreamFactory]
    ADFeatureSampleStreamFactory: typing.Type[ADFeatureSampleStreamFactory]
    ADFeaturizerSampleStream: typing.Type[ADFeaturizerSampleStream]
