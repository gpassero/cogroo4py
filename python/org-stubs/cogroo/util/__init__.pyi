import java.io
import java.nio.charset
import java.util
import jpype.protocol
import opennlp.tools.util
import org.cogroo.config
import org.cogroo.text
import org.cogroo.util.serializers
import typing



class ByteArrayUtil:
    def __init__(self): ...
    @staticmethod
    def toByteArray(inputStream: java.io.InputStream) -> typing.List[int]: ...

_CacheWrapper__T = typing.TypeVar('_CacheWrapper__T')  # <T>
class CacheWrapper(typing.Generic[_CacheWrapper__T]):
    def __init__(self): ...
    def compute(self, string: str) -> _CacheWrapper__T: ...
    def get(self, string: str) -> _CacheWrapper__T: ...

class Closeables:
    def __init__(self): ...
    @staticmethod
    def closeQuietly(closeable: java.io.Closeable) -> None: ...

class EntityUtils:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def groupTokens(string: str, list: java.util.List[org.cogroo.text.Token], list2: java.util.List[opennlp.tools.util.Span]) -> java.util.List[org.cogroo.text.Token]: ...
    @typing.overload
    @staticmethod
    def groupTokens(string: str, list: java.util.List[org.cogroo.text.Token], list2: java.util.List[opennlp.tools.util.Span], string2: str) -> java.util.List[org.cogroo.text.Token]: ...
    @staticmethod
    def groupTokensChar(string: str, list: java.util.List[org.cogroo.text.Token], list2: java.util.List[opennlp.tools.util.Span], string2: str) -> java.util.List[org.cogroo.text.Token]: ...

class FileUtils:
    def __init__(self): ...
    @staticmethod
    def copy(inputStream: java.io.InputStream, outputStream: java.io.OutputStream) -> None: ...
    @typing.overload
    @staticmethod
    def readFile(file: typing.Union[java.io.File, jpype.protocol.SupportsPath], charset: java.nio.charset.Charset) -> str: ...
    @typing.overload
    @staticmethod
    def readFile(string: str, charset: java.nio.charset.Charset) -> str: ...

class PairWordPOSTag:
    def __init__(self, string: str, string2: str): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getPosTag(self) -> str: ...
    def getWord(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class ResourcesUtil:
    def __init__(self): ...
    @staticmethod
    def getResourceAsString(class_: typing.Type[typing.Any], string: str) -> str: ...
    @staticmethod
    def getResourceFile(class_: typing.Type[typing.Any], string: str) -> java.io.File: ...

class StringsUtil:
    def __init__(self): ...
    @staticmethod
    def isNullOrEmpty(string: str) -> bool: ...
    @staticmethod
    def join(stringArray: typing.List[str], string2: str) -> str: ...
    @staticmethod
    def nullToEmpty(string: str) -> str: ...

class TextUtils:
    def __init__(self): ...
    @staticmethod
    def additionalContext(list: java.util.List[org.cogroo.text.Token], list2: java.util.List[org.cogroo.config.Analyzers]) -> typing.List[typing.List[str]]: ...
    @staticmethod
    def nicePrint(document: org.cogroo.text.Document) -> str: ...
    @staticmethod
    def tokensToString(list: java.util.List[org.cogroo.text.Token]) -> typing.List[str]: ...

class ToStringHelper:
    @typing.overload
    def add(self, string: str, boolean: bool) -> 'ToStringHelper': ...
    @typing.overload
    def add(self, string: str, char: str) -> 'ToStringHelper': ...
    @typing.overload
    def add(self, string: str, double: float) -> 'ToStringHelper': ...
    @typing.overload
    def add(self, string: str, float: float) -> 'ToStringHelper': ...
    @typing.overload
    def add(self, string: str, int: int) -> 'ToStringHelper': ...
    @typing.overload
    def add(self, string: str, object: typing.Any) -> 'ToStringHelper': ...
    @typing.overload
    def add(self, string: str, long: int) -> 'ToStringHelper': ...
    @typing.overload
    def addValue(self, boolean: bool) -> 'ToStringHelper': ...
    @typing.overload
    def addValue(self, char: str) -> 'ToStringHelper': ...
    @typing.overload
    def addValue(self, double: float) -> 'ToStringHelper': ...
    @typing.overload
    def addValue(self, float: float) -> 'ToStringHelper': ...
    @typing.overload
    def addValue(self, int: int) -> 'ToStringHelper': ...
    @typing.overload
    def addValue(self, object: typing.Any) -> 'ToStringHelper': ...
    @typing.overload
    def addValue(self, long: int) -> 'ToStringHelper': ...
    _checkNotNull__T = typing.TypeVar('_checkNotNull__T')  # <T>
    @staticmethod
    def checkNotNull(t: _checkNotNull__T) -> _checkNotNull__T: ...
    _firstNonNull__T = typing.TypeVar('_firstNonNull__T')  # <T>
    @staticmethod
    def firstNonNull(t: _firstNonNull__T, t2: _firstNonNull__T) -> _firstNonNull__T: ...
    def toString(self) -> str: ...
    @typing.overload
    @staticmethod
    def toStringHelper(class_: typing.Type[typing.Any]) -> 'ToStringHelper': ...
    @typing.overload
    @staticmethod
    def toStringHelper(object: typing.Any) -> 'ToStringHelper': ...
    @typing.overload
    @staticmethod
    def toStringHelper(string: str) -> 'ToStringHelper': ...

class TokenTagUtil:
    def __init__(self): ...
    @staticmethod
    def extract(tokenTagArray: typing.List[opennlp.tools.util.TokenTag], stringArray: typing.List[str], stringArray2: typing.List[str], stringArray3: typing.List[str]) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.util")``.

    ByteArrayUtil: typing.Type[ByteArrayUtil]
    CacheWrapper: typing.Type[CacheWrapper]
    Closeables: typing.Type[Closeables]
    EntityUtils: typing.Type[EntityUtils]
    FileUtils: typing.Type[FileUtils]
    PairWordPOSTag: typing.Type[PairWordPOSTag]
    ResourcesUtil: typing.Type[ResourcesUtil]
    StringsUtil: typing.Type[StringsUtil]
    TextUtils: typing.Type[TextUtils]
    ToStringHelper: typing.Type[ToStringHelper]
    TokenTagUtil: typing.Type[TokenTagUtil]
    serializers: org.cogroo.util.serializers.__module_protocol__
