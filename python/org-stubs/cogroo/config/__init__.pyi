import java.io
import java.lang
import java.util
import typing



class Analyzers(java.lang.Enum['Analyzers']):
    SENTENCE_DETECTOR: typing.ClassVar['Analyzers'] = ...
    TOKENIZER: typing.ClassVar['Analyzers'] = ...
    NAME_FINDER: typing.ClassVar['Analyzers'] = ...
    CONTRACTION_FINDER: typing.ClassVar['Analyzers'] = ...
    POS_TAGGER: typing.ClassVar['Analyzers'] = ...
    FEATURIZER: typing.ClassVar['Analyzers'] = ...
    LEMMATIZER: typing.ClassVar['Analyzers'] = ...
    CHUNKER: typing.ClassVar['Analyzers'] = ...
    HEAD_FINDER: typing.ClassVar['Analyzers'] = ...
    SHALLOW_PARSER: typing.ClassVar['Analyzers'] = ...
    @staticmethod
    def fromValue(string: str) -> 'Analyzers': ...
    def value(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'Analyzers': ...
    @staticmethod
    def values() -> typing.List['Analyzers']: ...

class LanguageConfiguration(java.io.Serializable):
    def __init__(self): ...
    def getLocale(self) -> str: ...
    def getModel(self) -> java.util.List['Model']: ...
    def getPipe(self) -> 'Pipe': ...
    def setLocale(self, string: str) -> None: ...
    def setPipe(self, pipe: 'Pipe') -> None: ...

class LanguageConfigurationUtil:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def get(inputStream: java.io.InputStream) -> LanguageConfiguration: ...
    @typing.overload
    @staticmethod
    def get(locale: java.util.Locale) -> LanguageConfiguration: ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...

class Model(java.io.Serializable):
    def __init__(self): ...
    def getType(self) -> Analyzers: ...
    def getValue(self) -> str: ...
    def setType(self, analyzers: Analyzers) -> None: ...
    def setValue(self, string: str) -> None: ...

class ObjectFactory:
    def __init__(self): ...
    def createLanguageConfiguration(self) -> LanguageConfiguration: ...
    def createModel(self) -> Model: ...
    def createPipe(self) -> 'Pipe': ...

class Pipe(java.io.Serializable):
    def __init__(self): ...
    def getAnalyzer(self) -> java.util.List[Analyzers]: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.config")``.

    Analyzers: typing.Type[Analyzers]
    LanguageConfiguration: typing.Type[LanguageConfiguration]
    LanguageConfigurationUtil: typing.Type[LanguageConfigurationUtil]
    Model: typing.Type[Model]
    ObjectFactory: typing.Type[ObjectFactory]
    Pipe: typing.Type[Pipe]
