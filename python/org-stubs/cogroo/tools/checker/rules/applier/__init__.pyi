import java.io
import java.util
import org.cogroo.entities
import org.cogroo.tools.checker
import org.cogroo.tools.checker.rules.dictionary
import org.cogroo.tools.checker.rules.model
import typing



class NullSyntacticChunk(org.cogroo.entities.SyntacticChunk):
    def getTokens(self) -> java.util.List[org.cogroo.entities.Token]: ...
    @staticmethod
    def instance() -> org.cogroo.entities.SyntacticChunk: ...
    def toString(self) -> str: ...

class NullToken(org.cogroo.entities.Token):
    @staticmethod
    def instance() -> org.cogroo.entities.Token: ...
    def setLexeme(self, string: str) -> None: ...
    def toString(self) -> str: ...

class RulesAccess:
    def getRules(self) -> org.cogroo.tools.checker.rules.model.Rules: ...
    def persist(self, rules: org.cogroo.tools.checker.rules.model.Rules) -> None: ...

class RulesApplier(org.cogroo.tools.checker.TypedChecker):
    ID_PREFIX: typing.ClassVar[str] = ...
    def __init__(self, rulesTreesProvider: 'RulesTreesProvider', cogrooTagDictionary: org.cogroo.tools.checker.rules.dictionary.CogrooTagDictionary): ...
    def check(self, sentence: org.cogroo.entities.Sentence) -> java.util.List[org.cogroo.entities.Mistake]: ...
    def filterIgnoredRules(self, list: java.util.List[org.cogroo.entities.Mistake]) -> None: ...
    def getCategories(self) -> java.util.List[str]: ...
    def getIdPrefix(self) -> str: ...
    def getPriority(self) -> int: ...
    def getRulesDefinition(self) -> java.util.Collection[org.cogroo.tools.checker.RuleDefinition]: ...
    def ignore(self, string: str) -> None: ...
    def resetIgnored(self) -> None: ...

class RulesProvider:
    def __init__(self, rulesAccess: RulesAccess, boolean: bool): ...
    def getRules(self) -> org.cogroo.tools.checker.rules.model.Rules: ...

class RulesTree(java.io.Serializable):
    def __init__(self, list: java.util.List['State']): ...
    def getRoot(self) -> 'State': ...

class RulesTrees(java.io.Serializable):
    def __init__(self, list: java.util.List[RulesTree]): ...
    def getGeneral(self) -> RulesTree: ...
    def getPhraseLocal(self) -> RulesTree: ...
    def getSubjectVerb(self) -> RulesTree: ...

class RulesTreesAccess:
    def getTrees(self) -> RulesTrees: ...
    def persist(self, rulesTrees: RulesTrees) -> None: ...

class RulesTreesBuilder:
    @typing.overload
    def __init__(self, rulesProvider: RulesProvider): ...
    @typing.overload
    def __init__(self, rulesProvider: RulesProvider, longArray: typing.List[int]): ...
    def getRulesTrees(self) -> RulesTrees: ...
    def printRulesTree(self, state: 'State') -> None: ...

class RulesTreesProvider:
    def __init__(self, rulesTreesAccess: RulesTreesAccess, boolean: bool): ...
    def getTrees(self) -> RulesTrees: ...

class State(java.io.Serializable):
    def __init__(self, int: int, patternElement: org.cogroo.tools.checker.rules.model.PatternElement): ...
    def getElement(self) -> org.cogroo.tools.checker.rules.model.PatternElement: ...
    def getName(self) -> int: ...
    def getNextStates(self) -> java.util.List['State']: ...
    def toString(self) -> str: ...

class SuggestionBuilder:
    def __init__(self, cogrooTagDictionary: org.cogroo.tools.checker.rules.dictionary.CogrooTagDictionary): ...
    def getBestFlexedWord(self, token: org.cogroo.entities.Token, tagMask: org.cogroo.tools.checker.rules.model.TagMask) -> str: ...
    def getSyntacticSuggestions(self, sentence: org.cogroo.entities.Sentence, list: java.util.List[org.cogroo.entities.SyntacticChunk], token: org.cogroo.entities.Token, rule: org.cogroo.tools.checker.rules.model.Rule) -> typing.List[str]: ...
    def getTokenSuggestions(self, sentence: org.cogroo.entities.Sentence, list: java.util.List[org.cogroo.entities.Token], token: org.cogroo.entities.Token, rule: org.cogroo.tools.checker.rules.model.Rule) -> typing.List[str]: ...

class XMLRuleDefinition(org.cogroo.tools.checker.RuleDefinition):
    def __init__(self, string: str, rule: org.cogroo.tools.checker.rules.model.Rule): ...
    def getCategory(self) -> str: ...
    def getDescription(self) -> str: ...
    def getExamples(self) -> java.util.List[org.cogroo.tools.checker.rules.model.Example]: ...
    def getGroup(self) -> str: ...
    def getId(self) -> str: ...
    def getMessage(self) -> str: ...
    def getPattern(self) -> org.cogroo.tools.checker.rules.model.Pattern: ...
    def getRuleType(self) -> org.cogroo.tools.checker.RuleType: ...
    def getShortMessage(self) -> str: ...
    def isXMLBased(self) -> bool: ...

class AcceptState(State):
    def __init__(self, int: int, patternElement: org.cogroo.tools.checker.rules.model.PatternElement, rule: org.cogroo.tools.checker.rules.model.Rule): ...
    def getRule(self) -> org.cogroo.tools.checker.rules.model.Rule: ...

class RulesTreesFromScratchAccess(RulesTreesAccess):
    def __init__(self, rulesTreesBuilder: RulesTreesBuilder): ...
    def getTrees(self) -> RulesTrees: ...
    def persist(self, rulesTrees: RulesTrees) -> None: ...

class RulesTreesSerializedAccess(RulesTreesAccess):
    def __init__(self, string: str): ...
    def getTrees(self) -> RulesTrees: ...
    def persist(self, rulesTrees: RulesTrees) -> None: ...

class RulesXmlAccess(RulesAccess):
    @typing.overload
    @staticmethod
    def getInstance() -> RulesAccess: ...
    @typing.overload
    @staticmethod
    def getInstance(string: str) -> RulesAccess: ...
    def getRule(self, int: int) -> org.cogroo.tools.checker.rules.model.Rule: ...
    def getRules(self) -> org.cogroo.tools.checker.rules.model.Rules: ...
    def persist(self, rules: org.cogroo.tools.checker.rules.model.Rules) -> None: ...
    def validate(self) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.tools.checker.rules.applier")``.

    AcceptState: typing.Type[AcceptState]
    NullSyntacticChunk: typing.Type[NullSyntacticChunk]
    NullToken: typing.Type[NullToken]
    RulesAccess: typing.Type[RulesAccess]
    RulesApplier: typing.Type[RulesApplier]
    RulesProvider: typing.Type[RulesProvider]
    RulesTree: typing.Type[RulesTree]
    RulesTrees: typing.Type[RulesTrees]
    RulesTreesAccess: typing.Type[RulesTreesAccess]
    RulesTreesBuilder: typing.Type[RulesTreesBuilder]
    RulesTreesFromScratchAccess: typing.Type[RulesTreesFromScratchAccess]
    RulesTreesProvider: typing.Type[RulesTreesProvider]
    RulesTreesSerializedAccess: typing.Type[RulesTreesSerializedAccess]
    RulesXmlAccess: typing.Type[RulesXmlAccess]
    State: typing.Type[State]
    SuggestionBuilder: typing.Type[SuggestionBuilder]
    XMLRuleDefinition: typing.Type[XMLRuleDefinition]
