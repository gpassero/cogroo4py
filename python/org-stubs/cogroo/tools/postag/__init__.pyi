import java.io
import java.util
import jpype.protocol
import opennlp.tools.dictionary
import opennlp.tools.postag
import opennlp.tools.util
import opennlp.tools.util.model
import typing



class GenderUtil:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def removeGender(string: str) -> str: ...
    @typing.overload
    @staticmethod
    def removeGender(stringArray: typing.List[str]) -> typing.List[str]: ...

class PortugueseFactory(opennlp.tools.postag.POSTaggerFactory):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dictionary: opennlp.tools.dictionary.Dictionary, tagDictionary: opennlp.tools.postag.TagDictionary): ...
    def createArtifactMap(self) -> java.util.Map[str, typing.Any]: ...
    def createArtifactSerializersMap(self) -> java.util.Map[str, opennlp.tools.util.model.ArtifactSerializer]: ...
    @typing.overload
    def createTagDictionary(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    def createTagDictionary(self, inputStream: java.io.InputStream) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    def getPOSContextGenerator(self) -> opennlp.tools.postag.POSContextGenerator: ...
    @typing.overload
    def getPOSContextGenerator(self, int: int) -> opennlp.tools.postag.POSContextGenerator: ...
    def getSequenceValidator(self) -> opennlp.tools.util.SequenceValidator[str]: ...
    def getTagDictionary(self) -> opennlp.tools.postag.TagDictionary: ...

class PortuguesePOSContextGenerator(opennlp.tools.postag.DefaultPOSContextGenerator):
    @typing.overload
    def __init__(self, int: int, dictionary: opennlp.tools.dictionary.Dictionary): ...
    @typing.overload
    def __init__(self, dictionary: opennlp.tools.dictionary.Dictionary): ...
    @typing.overload
    def getContext(self, int: int, objectArray: typing.List[typing.Any], stringArray: typing.List[str]) -> typing.List[str]: ...
    @typing.overload
    def getContext(self, int: int, stringArray: typing.List[str], stringArray2: typing.List[str], objectArray: typing.List[typing.Any]) -> typing.List[str]: ...

class PortuguesePOSSequenceValidator(opennlp.tools.util.SequenceValidator[str]):
    tagDictionary: opennlp.tools.postag.TagDictionary = ...
    def __init__(self, tagDictionary: opennlp.tools.postag.TagDictionary): ...
    def validSequence(self, int: int, stringArray: typing.List[str], stringArray2: typing.List[str], string3: str) -> bool: ...

class PortugueseExFactory(PortugueseFactory):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dictionary: opennlp.tools.dictionary.Dictionary, tagDictionary: opennlp.tools.postag.TagDictionary): ...
    @typing.overload
    def getPOSContextGenerator(self) -> opennlp.tools.postag.POSContextGenerator: ...
    @typing.overload
    def getPOSContextGenerator(self, int: int) -> opennlp.tools.postag.POSContextGenerator: ...

class PortugueseExtPOSContextGenerator(PortuguesePOSContextGenerator):
    @typing.overload
    def __init__(self, int: int, dictionary: opennlp.tools.dictionary.Dictionary): ...
    @typing.overload
    def __init__(self, dictionary: opennlp.tools.dictionary.Dictionary): ...

class ExtDictFSAPortugueseFactory(PortugueseExFactory):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dictionary: opennlp.tools.dictionary.Dictionary, tagDictionary: opennlp.tools.postag.TagDictionary): ...
    def createEmptyTagDictionary(self) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    def createTagDictionary(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    def createTagDictionary(self, inputStream: java.io.InputStream) -> opennlp.tools.postag.TagDictionary: ...
    def getTagDictionary(self) -> opennlp.tools.postag.TagDictionary: ...
    def setTagDictionary(self, tagDictionary: opennlp.tools.postag.TagDictionary) -> None: ...

class FSAPortugueseFactory(PortugueseExFactory):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, dictionary: opennlp.tools.dictionary.Dictionary, tagDictionary: opennlp.tools.postag.TagDictionary): ...
    def createArtifactMap(self) -> java.util.Map[str, typing.Any]: ...
    def createArtifactSerializersMap(self) -> java.util.Map[str, opennlp.tools.util.model.ArtifactSerializer]: ...
    def createEmptyTagDictionary(self) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    def createTagDictionary(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> opennlp.tools.postag.TagDictionary: ...
    @typing.overload
    def createTagDictionary(self, inputStream: java.io.InputStream) -> opennlp.tools.postag.TagDictionary: ...
    def getTagDictionary(self) -> opennlp.tools.postag.TagDictionary: ...
    def setTagDictionary(self, tagDictionary: opennlp.tools.postag.TagDictionary) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.tools.postag")``.

    ExtDictFSAPortugueseFactory: typing.Type[ExtDictFSAPortugueseFactory]
    FSAPortugueseFactory: typing.Type[FSAPortugueseFactory]
    GenderUtil: typing.Type[GenderUtil]
    PortugueseExFactory: typing.Type[PortugueseExFactory]
    PortugueseExtPOSContextGenerator: typing.Type[PortugueseExtPOSContextGenerator]
    PortugueseFactory: typing.Type[PortugueseFactory]
    PortuguesePOSContextGenerator: typing.Type[PortuguesePOSContextGenerator]
    PortuguesePOSSequenceValidator: typing.Type[PortuguesePOSSequenceValidator]
