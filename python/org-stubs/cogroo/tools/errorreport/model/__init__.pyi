import java.lang
import java.util
import typing



class BadIntervention:
    def __init__(self): ...
    def getClassification(self) -> 'BadIntervention.BadInterventionClassification': ...
    def getComment(self) -> str: ...
    def getRule(self) -> str: ...
    def getSpan(self) -> 'Span': ...
    def setClassification(self, badInterventionClassification: 'BadIntervention.BadInterventionClassification') -> None: ...
    def setComment(self, string: str) -> None: ...
    def setRule(self, string: str) -> None: ...
    def setSpan(self, span: 'Span') -> None: ...
    class BadInterventionClassification(java.lang.Enum['BadIntervention.BadInterventionClassification']):
        FALSE_ERROR: typing.ClassVar['BadIntervention.BadInterventionClassification'] = ...
        INAPPROPRIATE_DESCRIPTION: typing.ClassVar['BadIntervention.BadInterventionClassification'] = ...
        INAPPROPRIATE_SUGGESTION: typing.ClassVar['BadIntervention.BadInterventionClassification'] = ...
        @staticmethod
        def fromValue(string: str) -> 'BadIntervention.BadInterventionClassification': ...
        def value(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'BadIntervention.BadInterventionClassification': ...
        @staticmethod
        def values() -> typing.List['BadIntervention.BadInterventionClassification']: ...

class ErrorReport:
    def __init__(self): ...
    def getBadInterventions(self) -> 'ErrorReport.BadInterventions': ...
    def getOmissions(self) -> 'ErrorReport.Omissions': ...
    def getText(self) -> str: ...
    def getVersion(self) -> str: ...
    def setBadInterventions(self, badInterventions: 'ErrorReport.BadInterventions') -> None: ...
    def setOmissions(self, omissions: 'ErrorReport.Omissions') -> None: ...
    def setText(self, string: str) -> None: ...
    def setVersion(self, string: str) -> None: ...
    class BadInterventions:
        def __init__(self): ...
        def getBadIntervention(self) -> java.util.List[BadIntervention]: ...
    class Omissions:
        def __init__(self): ...
        def getOmission(self) -> java.util.List['Omission']: ...

class IgnoreError:
    def __init__(self): ...
    def getRule(self) -> int: ...
    def getSpan(self) -> 'Span': ...
    def setRule(self, int: int) -> None: ...
    def setSpan(self, span: 'Span') -> None: ...

class ObjectFactory:
    def __init__(self): ...
    def createBadIntervention(self) -> BadIntervention: ...
    def createErrorReport(self) -> ErrorReport: ...
    def createErrorReportBadInterventions(self) -> ErrorReport.BadInterventions: ...
    def createErrorReportOmissions(self) -> ErrorReport.Omissions: ...
    def createIgnoreError(self) -> IgnoreError: ...
    def createOmission(self) -> 'Omission': ...
    def createSpan(self) -> 'Span': ...

class Omission:
    def __init__(self): ...
    def getCategory(self) -> str: ...
    def getComment(self) -> str: ...
    def getCustomCategory(self) -> str: ...
    def getReplaceBy(self) -> str: ...
    def getSpan(self) -> 'Span': ...
    def setCategory(self, string: str) -> None: ...
    def setComment(self, string: str) -> None: ...
    def setCustomCategory(self, string: str) -> None: ...
    def setReplaceBy(self, string: str) -> None: ...
    def setSpan(self, span: 'Span') -> None: ...

class Span:
    def __init__(self): ...
    def getEnd(self) -> int: ...
    def getStart(self) -> int: ...
    def setEnd(self, int: int) -> None: ...
    def setStart(self, int: int) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.tools.errorreport.model")``.

    BadIntervention: typing.Type[BadIntervention]
    ErrorReport: typing.Type[ErrorReport]
    IgnoreError: typing.Type[IgnoreError]
    ObjectFactory: typing.Type[ObjectFactory]
    Omission: typing.Type[Omission]
    Span: typing.Type[Span]
