import java.io
import java.lang
import org.apache.uima
import org.apache.uima.analysis_component
import org.apache.uima.analysis_engine
import org.apache.uima.cas
import org.cogroo.text
import typing



class AEFactory:
    def __init__(self): ...
    @staticmethod
    def createRutaAE() -> org.apache.uima.analysis_engine.AnalysisEngine: ...

class AnnotatorUtil:
    @staticmethod
    def getOptionalBooleanParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> bool: ...
    @staticmethod
    def getOptionalFeature(type: org.apache.uima.cas.Type, string: str, string2: str) -> org.apache.uima.cas.Feature: ...
    @staticmethod
    def getOptionalFeatureParameter(uimaContext: org.apache.uima.UimaContext, type: org.apache.uima.cas.Type, string: str, string2: str) -> org.apache.uima.cas.Feature: ...
    @staticmethod
    def getOptionalFloatParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> float: ...
    @staticmethod
    def getOptionalIntegerParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> int: ...
    @staticmethod
    def getOptionalResourceAsStream(uimaContext: org.apache.uima.UimaContext, string: str) -> java.io.InputStream: ...
    @staticmethod
    def getOptionalStringArrayParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> typing.List[str]: ...
    @staticmethod
    def getOptionalStringParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> str: ...
    @staticmethod
    def getOptionalTypeParameter(uimaContext: org.apache.uima.UimaContext, typeSystem: org.apache.uima.cas.TypeSystem, string: str) -> org.apache.uima.cas.Type: ...
    @staticmethod
    def getRequiredBooleanParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def getRequiredFeature(type: org.apache.uima.cas.Type, string: str) -> org.apache.uima.cas.Feature: ...
    @typing.overload
    @staticmethod
    def getRequiredFeature(type: org.apache.uima.cas.Type, string: str, string2: str) -> org.apache.uima.cas.Feature: ...
    @typing.overload
    @staticmethod
    def getRequiredFeatureParameter(uimaContext: org.apache.uima.UimaContext, type: org.apache.uima.cas.Type, string: str) -> org.apache.uima.cas.Feature: ...
    @typing.overload
    @staticmethod
    def getRequiredFeatureParameter(uimaContext: org.apache.uima.UimaContext, type: org.apache.uima.cas.Type, string: str, string2: str) -> org.apache.uima.cas.Feature: ...
    @staticmethod
    def getRequiredFloatParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> float: ...
    @staticmethod
    def getRequiredIntegerParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> int: ...
    @staticmethod
    def getRequiredStringParameter(uimaContext: org.apache.uima.UimaContext, string: str) -> str: ...
    @staticmethod
    def getRequiredTypeParameter(uimaContext: org.apache.uima.UimaContext, typeSystem: org.apache.uima.cas.TypeSystem, string: str) -> org.apache.uima.cas.Type: ...
    @staticmethod
    def getResourceAsStream(uimaContext: org.apache.uima.UimaContext, string: str) -> java.io.InputStream: ...
    @staticmethod
    def getType(typeSystem: org.apache.uima.cas.TypeSystem, string: str) -> org.apache.uima.cas.Type: ...

class CoGrOOUIMA(org.apache.uima.analysis_component.CasAnnotator_ImplBase):
    CHUNK_TYPE_PARAMETER: typing.ClassVar[str] = ...
    CHUNK_TAG_FEATURE_PARAMETER: typing.ClassVar[str] = ...
    def __init__(self): ...
    def destroy(self) -> None: ...
    def initialize(self, uimaContext: org.apache.uima.UimaContext) -> None: ...
    @typing.overload
    def process(self, abstractCas: org.apache.uima.cas.AbstractCas) -> None: ...
    @typing.overload
    def process(self, cAS: org.apache.uima.cas.CAS) -> None: ...
    def typeSystemInit(self, typeSystem: org.apache.uima.cas.TypeSystem) -> None: ...

class ExceptionMessages:
    MESSAGE_CATALOG: typing.ClassVar[str] = ...
    IO_ERROR_MODEL_READING: typing.ClassVar[str] = ...
    IO_ERROR_DICTIONARY_READING: typing.ClassVar[str] = ...
    INVALID_DICTIONARY_FORMAT: typing.ClassVar[str] = ...
    PARAMETER_NOT_FOUND: typing.ClassVar[str] = ...
    WRONG_PARAMETER_TYPE: typing.ClassVar[str] = ...
    TYPE_NOT_FOUND: typing.ClassVar[str] = ...
    FEATURE_NOT_FOUND: typing.ClassVar[str] = ...
    WRONG_FEATURE_TYPE: typing.ClassVar[str] = ...
    def __init__(self): ...

class ExtractExamples:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...

class OpenNlpAnnotatorProcessException(org.apache.uima.analysis_engine.AnalysisEngineProcessException):
    @typing.overload
    def __init__(self, string: str, objectArray: typing.List[typing.Any]): ...
    @typing.overload
    def __init__(self, string: str, objectArray: typing.List[typing.Any], throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class Runtime:
    def __init__(self): ...
    @staticmethod
    def main(stringArray: typing.List[str]) -> None: ...

class UimaCasAdapter:
    CHUNK_TYPE_PARAMETER: typing.ClassVar[str] = ...
    CHUNK_TAG_FEATURE_PARAMETER: typing.ClassVar[str] = ...
    def __init__(self): ...
    def getChunkFeature(self) -> org.apache.uima.cas.Feature: ...
    def getChunkHead(self) -> org.apache.uima.cas.Feature: ...
    def getChunkType(self) -> org.apache.uima.cas.Type: ...
    def getFeaturesFeature(self) -> org.apache.uima.cas.Feature: ...
    def getLemmaFeature(self) -> org.apache.uima.cas.Feature: ...
    def getLexemeFeature(self) -> org.apache.uima.cas.Feature: ...
    def getPosFeature(self) -> org.apache.uima.cas.Feature: ...
    def getSentenceType(self) -> org.apache.uima.cas.Type: ...
    def getSyntacticChunkFeature(self) -> org.apache.uima.cas.Feature: ...
    def getSyntacticChunkType(self) -> org.apache.uima.cas.Type: ...
    def getTokenType(self) -> org.apache.uima.cas.Type: ...
    def populateCas(self, sentence: org.cogroo.text.Sentence, cAS: org.apache.uima.cas.CAS) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.ruta.uima")``.

    AEFactory: typing.Type[AEFactory]
    AnnotatorUtil: typing.Type[AnnotatorUtil]
    CoGrOOUIMA: typing.Type[CoGrOOUIMA]
    ExceptionMessages: typing.Type[ExceptionMessages]
    ExtractExamples: typing.Type[ExtractExamples]
    OpenNlpAnnotatorProcessException: typing.Type[OpenNlpAnnotatorProcessException]
    Runtime: typing.Type[Runtime]
    UimaCasAdapter: typing.Type[UimaCasAdapter]
