import java.util
import org.cogroo.config
import org.cogroo.text
import org.cogroo.text.tree
import typing



class ChunkImpl(org.cogroo.text.Chunk):
    def __init__(self, string: str, int: int, int2: int, sentence: org.cogroo.text.Sentence): ...
    def getEnd(self) -> int: ...
    def getHeadIndex(self) -> int: ...
    def getStart(self) -> int: ...
    def getTag(self) -> str: ...
    def getTokens(self) -> java.util.List[org.cogroo.text.Token]: ...
    def setBoundaries(self, int: int, int2: int) -> None: ...
    def setHeadIndex(self, int: int) -> None: ...
    def setTag(self, string: str) -> None: ...
    def toString(self) -> str: ...

class DocumentImpl(org.cogroo.text.Document):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    def getSentences(self) -> java.util.List[org.cogroo.text.Sentence]: ...
    def getText(self) -> str: ...
    def setSentences(self, list: java.util.List[org.cogroo.text.Sentence]) -> None: ...
    def setText(self, string: str) -> None: ...

class SentenceImpl(org.cogroo.text.Sentence):
    @typing.overload
    def __init__(self, int: int, int2: int, list: java.util.List[org.cogroo.text.Token], document: org.cogroo.text.Document): ...
    @typing.overload
    def __init__(self, int: int, int2: int, document: org.cogroo.text.Document): ...
    def asTree(self) -> org.cogroo.text.tree.Node: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getChunks(self) -> java.util.List[org.cogroo.text.Chunk]: ...
    def getEnd(self) -> int: ...
    def getStart(self) -> int: ...
    def getSyntacticChunks(self) -> java.util.List[org.cogroo.text.SyntacticChunk]: ...
    def getText(self) -> str: ...
    def getTokens(self) -> java.util.List[org.cogroo.text.Token]: ...
    def getTokensProb(self) -> float: ...
    def hashCode(self) -> int: ...
    def setBoundaries(self, int: int, int2: int) -> None: ...
    def setChunks(self, list: java.util.List[org.cogroo.text.Chunk]) -> None: ...
    def setSyntacticChunks(self, list: java.util.List[org.cogroo.text.SyntacticChunk]) -> None: ...
    def setTokens(self, list: java.util.List[org.cogroo.text.Token]) -> None: ...
    def setTokensProb(self, double: float) -> None: ...
    def toString(self) -> str: ...

class SyntacticChunkImpl(org.cogroo.text.SyntacticChunk):
    def __init__(self, string: str, int: int, int2: int, sentence: org.cogroo.text.Sentence): ...
    def getEnd(self) -> int: ...
    def getStart(self) -> int: ...
    def getTag(self) -> str: ...
    def getTokens(self) -> java.util.List[org.cogroo.text.Token]: ...
    def setTag(self, string: str) -> None: ...
    def toString(self) -> str: ...

class TokenImpl(org.cogroo.text.Token):
    @typing.overload
    def __init__(self, int: int, int2: int, string: str): ...
    @typing.overload
    def __init__(self, int: int, int2: int, string: str, stringArray: typing.List[str], string3: str, string4: str): ...
    def addContext(self, analyzers: org.cogroo.config.Analyzers, string: str) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAdditionalContext(self, analyzers: org.cogroo.config.Analyzers) -> str: ...
    def getChunkTag(self) -> str: ...
    def getEnd(self) -> int: ...
    def getFeatures(self) -> str: ...
    def getLemmas(self) -> typing.List[str]: ...
    def getLexeme(self) -> str: ...
    def getPOSTag(self) -> str: ...
    def getPOSTagProb(self) -> float: ...
    def getStart(self) -> int: ...
    def getSyntacticTag(self) -> str: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def isChunkHead(self) -> bool: ...
    @typing.overload
    def isChunkHead(self, boolean: bool) -> None: ...
    def lexemesToString(self, list: java.util.List[org.cogroo.text.Token]) -> typing.List[str]: ...
    def setBoundaries(self, int: int, int2: int) -> None: ...
    def setChunkTag(self, string: str) -> None: ...
    def setFeatures(self, string: str) -> None: ...
    def setLemmas(self, stringArray: typing.List[str]) -> None: ...
    def setLexeme(self, string: str) -> None: ...
    def setPOSTag(self, string: str) -> None: ...
    def setPOSTagProb(self, double: float) -> None: ...
    def setSyntacticTag(self, string: str) -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.text.impl")``.

    ChunkImpl: typing.Type[ChunkImpl]
    DocumentImpl: typing.Type[DocumentImpl]
    SentenceImpl: typing.Type[SentenceImpl]
    SyntacticChunkImpl: typing.Type[SyntacticChunkImpl]
    TokenImpl: typing.Type[TokenImpl]
