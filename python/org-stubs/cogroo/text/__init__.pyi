import java.util
import org.cogroo.config
import org.cogroo.text.impl
import org.cogroo.text.tree
import typing



class AdditionalContext:
    def __init__(self): ...
    def getAdditionalContext(self) -> typing.List[typing.List[str]]: ...

class Chunk:
    def getEnd(self) -> int: ...
    def getHeadIndex(self) -> int: ...
    def getStart(self) -> int: ...
    def getTag(self) -> str: ...
    def getTokens(self) -> java.util.List['Token']: ...
    def setBoundaries(self, int: int, int2: int) -> None: ...
    def setHeadIndex(self, int: int) -> None: ...
    def setTag(self, string: str) -> None: ...

class Document:
    def getSentences(self) -> java.util.List['Sentence']: ...
    def getText(self) -> str: ...
    def setSentences(self, list: java.util.List['Sentence']) -> None: ...
    def setText(self, string: str) -> None: ...

class Sentence:
    def asTree(self) -> org.cogroo.text.tree.Node: ...
    def getChunks(self) -> java.util.List[Chunk]: ...
    def getEnd(self) -> int: ...
    def getStart(self) -> int: ...
    def getSyntacticChunks(self) -> java.util.List['SyntacticChunk']: ...
    def getText(self) -> str: ...
    def getTokens(self) -> java.util.List['Token']: ...
    def getTokensProb(self) -> float: ...
    def setBoundaries(self, int: int, int2: int) -> None: ...
    def setChunks(self, list: java.util.List[Chunk]) -> None: ...
    def setSyntacticChunks(self, list: java.util.List['SyntacticChunk']) -> None: ...
    def setTokens(self, list: java.util.List['Token']) -> None: ...
    def setTokensProb(self, double: float) -> None: ...

class SyntacticChunk:
    def getEnd(self) -> int: ...
    def getStart(self) -> int: ...
    def getTag(self) -> str: ...
    def getTokens(self) -> java.util.List['Token']: ...
    def setTag(self, string: str) -> None: ...

class Token:
    def addContext(self, analyzers: org.cogroo.config.Analyzers, string: str) -> None: ...
    def getAdditionalContext(self, analyzers: org.cogroo.config.Analyzers) -> typing.Any: ...
    def getChunkTag(self) -> str: ...
    def getEnd(self) -> int: ...
    def getFeatures(self) -> str: ...
    def getLemmas(self) -> typing.List[str]: ...
    def getLexeme(self) -> str: ...
    def getPOSTag(self) -> str: ...
    def getPOSTagProb(self) -> float: ...
    def getStart(self) -> int: ...
    def getSyntacticTag(self) -> str: ...
    @typing.overload
    def isChunkHead(self) -> bool: ...
    @typing.overload
    def isChunkHead(self, boolean: bool) -> None: ...
    def setBoundaries(self, int: int, int2: int) -> None: ...
    def setChunkTag(self, string: str) -> None: ...
    def setFeatures(self, string: str) -> None: ...
    def setLemmas(self, stringArray: typing.List[str]) -> None: ...
    def setLexeme(self, string: str) -> None: ...
    def setPOSTag(self, string: str) -> None: ...
    def setPOSTagProb(self, double: float) -> None: ...
    def setSyntacticTag(self, string: str) -> None: ...


class __module_protocol__(typing.Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.cogroo.text")``.

    AdditionalContext: typing.Type[AdditionalContext]
    Chunk: typing.Type[Chunk]
    Document: typing.Type[Document]
    Sentence: typing.Type[Sentence]
    SyntacticChunk: typing.Type[SyntacticChunk]
    Token: typing.Type[Token]
    impl: org.cogroo.text.impl.__module_protocol__
    tree: org.cogroo.text.tree.__module_protocol__
